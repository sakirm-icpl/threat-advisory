{
  "exported_at": "2025-09-29T12:00:47.856739Z",
  "vendors": [
    {
      "name": "Karjasoft",
      "created_at": "2025-09-29T10:22:28.794527Z",
      "updated_at": "2025-09-29T10:22:28.794535Z",
      "products": [
        {
          "name": "Sami FTP Server",
          "category": "Service Application",
          "description": "## 1. What is this product used for?  \nKarjasoft Sami FTP Server is a lightweight FTP server software used primarily for file sharing and transfer over FTP protocol, supporting easy user account management and server configuration.\n\n## 2. What is the type of this software?  \n- Service Application\n\n## 3. Remote Version Detection Methods (No Credentials Required)  \nTechniques a scanner can use to remotely detect Sami FTP Server and its version without authentication:\n\n- **HTTP headers**  \n  - Not applicable since Sami FTP Server is an FTP service, not HTTP-based.\n\n- **HTML body (e.g., meta tags, footers)**  \n  - Not applicable to FTP servers.\n\n- **API endpoints**  \n  - Not applicable; no web or API interface by default.\n\n- **Static asset paths (JS/CSS)**  \n  - Not applicable.\n\n- **Error messages or stack traces**  \n  - FTP banner messages or responses to commands like `SYST` or `HELP` might reveal the server name and version.\n\n- **TLS certificate clues**  \n  - If FTPS is enabled, TLS certificate might disclose some hosting information but typically no version info.\n\n- **robots.txt or sitemap.xml**  \n  - Not applicable to FTP servers.\n\n- **Raw socket/banner grabs**  \n  - Banner grabbing via FTP port (typically port 21) is a common method. The FTP banner often contains the server software name and version string, e.g.:  \n    ```\n    220 KarjaSoft Sami FTP Server v2.0.2 ready.\n    ```\n- **Any custom protocol if applicable**  \n  - Sami FTP Server uses standard FTP/FTPS protocols.\n\n- **Java-specific techniques**  \n  - Not applicable; Sami FTP Server is not Java-based.\n\n## 4. Indirect or Fingerprintable Signs of Version/Presence  \n\n- **Static asset naming/hash patterns**  \n  - Not applicable.\n\n- **Unique HTML structures**  \n  - Not applicable.\n\n- **Field names in API responses**  \n  - Not applicable.\n\n- **Plugin paths**  \n  - Not applicable.\n\n- **Stack traces or internal file references**  \n  - Error replies with distinctive Sami FTP Server messages or logs might provide clues.\n\n- **Error page structure**  \n  - Unique FTP response codes or error messages as per Sami’s design.\n\n- **Any response headers or clues that can be fingerprinted**  \n  - The FTP response banner string and other FTP command replies are key indicators.\n\n## 5. Summary Table  \n\n| Detection Vector          | Example Output / Signature                    | Notes                             |\n|--------------------------|----------------------------------------------|-----------------------------------|\n| FTP Banner Grab          | `220 KarjaSoft Sami FTP Server v2.0.2 ready.` | Primary method for version detection |\n| FTP Command Responses    | Distinctive server replies to FTP commands   | Helps confirm presence             |\n| TLS Certificate          | Hosting details if FTPS enabled               | No application version info        |\n| HTTP or API Related      | N/A                                          | Not applicable                    |\n| Java Techniques          | N/A                                          | Not applicable                    |",
          "created_at": "2025-09-29T10:22:28.806064Z",
          "updated_at": "2025-09-29T10:22:28.806071Z",
          "detection_methods": [
            {
              "name": "FTP banner Grabbing",
              "protocol": "FTP",
              "code_snippets": [
                {
                  "code_language": "python",
                  "code_content": "import socket\nimport re\n\ndef grab_sami_ftp_version(host, port=21):\n    try:\n        # Create a TCP socket connection\n        with socket.create_connection((host, port), timeout=5) as sock:\n            banner = sock.recv(1024).decode('utf-8').strip()\n\n            # Use regex to extract version info for Sami FTP Server\n            match = re.search(r'Sami FTP Server ([\\d\\.]+)', banner, re.IGNORECASE)\n            if match:\n                version = match.group(1)\n                print(f\"Sami FTP Server version: {version}\")\n                return version\n            else:\n                print(\"Sami FTP Server version not found in banner\")\n                return None\n\n    except (socket.timeout, ConnectionRefusedError) as e:\n        print(f\"Connection error: {e}\")\n        return None\n\nif __name__ == \"__main__\":\n    host = \"localhost\"   # change as needed\n    grab_sami_ftp_version(host)\n"
                },
                {
                  "code_language": "ruby",
                  "code_content": "require 'socket'\n\ndef grab_sami_ftp_version(host, port=21)\n  begin\n    # Create a TCP socket connection\n    socket = TCPSocket.new(host, port)\n    ip_address = socket.peeraddr[3]\n    banner = socket.gets.strip\n\n    # Use regex to extract version info for Sami FTP Server\n    if banner =~ /Sami FTP Server ([\\d\\.]+)/i\n      version = $1\n      puts \"Sami FTP Server version: #{version}\"\n      return version\n    else\n      puts \"Sami FTP Server version not found in banner\"\n      return nil\n    end\n\n  rescue Errno::ECONNREFUSED, Errno::ETIMEDOUT => e\n    puts \"Connection error: #{e}\"\n    return nil\n  ensure\n    socket&.close\n  end\nend\n\nif __FILE__ == $PROGRAM_NAME\n  host = \"localhost\"   # change as needed\n  grab_sami_ftp_version(host)\nend\n"
                }
              ],
              "expected_response": "Sami FTP Server version: 2.0.2",
              "requires_auth": false,
              "created_at": "2025-09-29T10:22:28.818197Z",
              "updated_at": "2025-09-29T10:22:28.818204Z"
            }
          ],
          "setup_guides": [
            {
              "instructions": "# Karjasoft Sami FTP Server Setup Guide\n\n## 1. Download the Application\n- Visit the archived download link:  \n  [Sami FTP Server Installer](https://web.archive.org/web/20070104022116/http://www.karjasoft.com/files/samiftp/samiftpd_install.exe)\n- Save the installer to your computer.\n\n## 2. Installation\n- Double-click the installer (`samiftpd_install.exe`).\n- Accept the license agreement and choose an install location.\n- Complete installation as prompted.\n\n## 3. Initial Startup\n- Run **Sami FTP Server** from the Start Menu or desktop shortcut.\n- If prompted, set an administrator password—ensure it's strong (combine upper/lowercase, digits, and symbols).\n\n## 4. User Configuration\n- Click on the `Users` tab in the program.\n- Press `Add` to create new users:\n  - Enter a username and password for each.\n  - Assign a `Home Directory` (e.g., `C:\\FTP\\Public`).\n  - Specify permissions: Read, Write, Delete as needed.\n\n## 5. Directory Setup\n- Create folders for FTP storage:\n  - Example: `C:\\FTP\\Public`, `C:\\FTP\\Private`\n- Map user accounts to corresponding directories.\n- Set Windows folder permissions to restrict or allow access properly.\n\n## 6. Server & Network Configuration\n- Default FTP port is **21**. Change it in `Server Settings > Network > Port` if needed.\n- Add an inbound firewall rule for chosen port in Windows Firewall.\n- Forward the port on your router for remote access.\n\n## 7. Security Settings\n- Enable `Passive Mode` in the settings for NAT/firewall compatibility.\n- **Disable anonymous logins** unless public access is required.\n- Restrict IP addresses if desired for further security.\n\n## 8. Start the FTP Server\n- Press `Start Server` within the Sami FTP GUI.\n- Verify that the server is running (status indicator should be green or show \"Running\").\n\n## 9. Test Connection\n- Use an FTP client (like FileZilla).\n- Connect using server's IP address and FTP port.\n- Login with a created username/password and verify file access.\n\n## 10. Maintenance & Safety\n- Regularly backup configuration files.\n- If server crashes or is exploited, delete `SamiFTP.binlog` to remove potential payloads from logs.\n- Keep system security patches up to date[1][4].\n\n----\n\n**Notes:**  \n- Sami FTP Server v2.0.2 is compatible with Windows XP, 7, 10 (x86 & x64)[1][6].\n- Administrator actions like viewing log files can trigger issues if server is exploited.\n- Program is actively maintained as of August 2025, but performs best on Windows systems.",
              "created_at": "2025-09-29T10:22:28.836790Z",
              "updated_at": "2025-09-29T10:22:28.836795Z"
            }
          ]
        }
      ]
    },
    {
      "name": "Apache",
      "created_at": "2025-09-29T10:22:28.841722Z",
      "updated_at": "2025-09-29T10:22:28.841726Z",
      "products": [
        {
          "name": "Traffic Server",
          "category": "Service Application",
          "description": "# Apache Traffic Server Detailed Information\n\n## 1. What is this product used for?  \nApache Traffic Server (ATS) is a high-performance, scalable caching proxy server designed to improve network speed and reduce bandwidth usage by caching and forwarding web content efficiently.\n\n## 2. What is the type of this software?  \n- Service Application\n\n## 3. Remote Version Detection Methods (No Credentials Required)  \nTechniques that scanners can use to detect Apache Traffic Server version remotely without credentials:\n\n- **HTTP Headers**  \n  - The `Via` header often identifies ATS with its version, e.g.,  \n    ```\n    Via: 1.1 trafficserver (Apache Traffic Server/10.1.2)\n    ```\n  - Sometimes the `Server` header may also include ATS and version information.\n\n- **HTML Body**  \n  - Default ATS error or status pages sometimes include textual references to \"Traffic Server\" but rarely expose version numbers directly.\n\n- **API Endpoints**  \n  - No standard public API endpoint to reveal version information.\n\n- **Static Asset Paths (JS/CSS)**  \n  - Generally not applicable, as ATS is a proxy server and does not serve UI assets itself.\n\n- **Error Messages or Stack Traces**  \n  - Default error pages generated by ATS may contain references to the product and occasionally version data.\n\n- **TLS Certificate Clues**  \n  - When TLS is terminated at ATS, certificate details do not usually reveal version.  \n  - JA3 TLS fingerprinting can identify ATS but cannot pinpoint version accurately.\n\n- **robots.txt or sitemap.xml**  \n  - These files do not typically provide version information related to ATS.\n\n- **Raw Socket/Banner Grabs**  \n  - Banner grabbing on HTTP or proxy ports might reveal server behavior consistent with ATS, especially via HTTP headers.\n\n- **Custom Protocols**  \n  - ATS primarily serves HTTP/1.1 and HTTP/2; no proprietary protocols are used.\n\n- **Java-specific Techniques**  \n  - Not applicable, as ATS is written in C++, not Java.\n\n## 4. Indirect or Fingerprintable Signs of Version/Presence  \nIf direct version strings are not available, scanners may look for:\n\n- **Unique HTML Structures**  \n  - Default ATS error pages have a distinct look and format that can help identify its presence.\n\n- **Plugin Paths**  \n  - Custom or exposed plugin endpoints might leak presence but are rare in default setups.\n\n- **Error Page Structure**  \n  - ATS error pages show typical headers and body content formats unique to the product.\n\n- **Response Headers or Clues**  \n  - `X-Cache` header values such as \"HIT\" or \"MISS\" specific to ATS caching behavior.  \n  - Presence of the `Via` header mentioning \"trafficserver\" even if version is omitted.\n\n- **Stack Traces or Internal References**  \n  - Rare, but if error pages or logs are exposed, these might contain internal ATS details.\n\n- **Field Names in API Responses**  \n  - Not applicable in default ATS installs.\n\n- **Static Asset Naming or Hash Patterns**  \n  - Not applicable as ATS does not serve frontend assets.\n\n## 5. Summary Table  \n\n| Detection Vector          | Example Output / Signature                                   | Notes                                    |\n|--------------------------|--------------------------------------------------------------|------------------------------------------|\n| HTTP Headers             | `Via: 1.1 trafficserver (Apache Traffic Server/10.1.2)`      | Primary version disclosure method         |\n|                          | `Server: ATS/9.0.1`                                          | Sometimes present in server header       |\n| HTML Body                | Default ATS error page mentioning \"Traffic Server\"          | Identifies product, version rare          |\n| Error Messages           | ATS proxy error pages                                         | Can reveal presence or occasionally version |\n| TLS Certificate / JA3    | JA3 TLS fingerprint indicating ATS                           | Version info not precise                   |\n| Raw Socket Banners       | HTTP response headers and behaviors distinct to ATS          | Indirect fingerprint method               |\n| Unique Headers           | `X-Cache: HIT` or `MISS` cache headers                        | ATS cache behavior indicator               |\n| Plugin Paths             | Rarely exposed, may leak plugin presence                      | Not common                                |\n| Java-specific Techniques | N/A                                                          | ATS is not Java-based                      |",
          "created_at": "2025-09-29T10:22:28.847726Z",
          "updated_at": "2025-09-29T10:22:28.847732Z",
          "detection_methods": [
            {
              "name": "HTTP banner Grabbing",
              "protocol": "HTTP",
              "code_snippets": [
                {
                  "code_language": "ruby",
                  "code_content": "require 'net/http'\nrequire 'uri'\n\ndef get_ats_version(url)\n  uri = URI.parse(url)\n  response = Net::HTTP.get_response(uri)\n  \n  return nil unless response.code.to_i == 200\n  \n  body = response.body\n  if body =~ /^ATS\\/([\\d\\.]+)/i\n    svc_app_name = 'apache:traffic_server'\n    version = $~[1]\n    return svc_app_name, version\n  end\n\n  return nil\nend\n\n# Example usage, replace URL with actual ATS banner source URL\nresult = get_ats_version('http://localhost:8080/banner')\n\nif result\n  svc_app_name, version = result\n  puts \"Service Name: #{svc_app_name}\"\n  puts \"Version: #{version}\"\nelse\n  puts \"ATS version not found in response\"\nend"
                },
                {
                  "code_language": "python",
                  "code_content": "import requests\nimport re\n\ndef get_ats_version(url):\n    try:\n        response = requests.get(url)\n        if response.status_code != 200:\n            return None\n        \n        body = response.text\n        match = re.match(r'^ATS/([\\d\\.]+)', body, re.IGNORECASE)\n        if match:\n            svc_app_name = 'apache:traffic_server'\n            version = match.group(1)\n            return svc_app_name, version\n        return None\n    except requests.RequestException:\n        return None\n\n# Example usage, replace URL with actual ATS banner source URL\nresult = get_ats_version('http://localhost:8080/banner')\n\nif result:\n    svc_app_name, version = result\n    print(f\"Service Name: {svc_app_name}\")\n    print(f\"Version: {version}\")\nelse:\n    print(\"ATS version not found in response\")"
                }
              ],
              "expected_response": "Service Name: apache:traffic_server\nVersion: 9.2.1",
              "requires_auth": false,
              "created_at": "2025-09-29T11:58:17.324721Z",
              "updated_at": "2025-09-29T11:58:41.408579Z"
            }
          ],
          "setup_guides": []
        },
        {
          "name": "Answer",
          "category": "Web Application",
          "description": "## 1. What is this product used for?  \nApache Answer is an open-source Q&A platform designed to facilitate knowledge sharing within teams and communities by enabling users to ask, answer, and vote on questions in an organized manner.\n\n## 2. What is the type of this software?  \n- Web Application\n\n## 3. Remote Version Detection Methods (No Credentials Required)  \nMethods that scanners can use to detect Apache Answer and potentially its version remotely include:\n\n- **HTTP Headers**  \n  - May reveal server framework or application server but typically no explicit version of Apache Answer unless custom headers are added.\n\n- **HTML Body (e.g., meta tags, footers)**  \n  - The HTML body may contain identifiable marks such as footer credits or meta tags referencing \"Apache Answer\" or specific version numbers when default branding is left intact.\n\n- **API Endpoints**  \n  - Public or undocumented API endpoints might leak version info through API responses if accessible.\n\n- **Static Asset Paths (JS/CSS)**  \n  - Asset file names might include versioning hashes or specific naming conventions that hint at the presence of Apache Answer.\n\n- **Error Messages or Stack Traces**  \n  - If error pages are exposed, they might reveal server-side errors or stack traces referencing Apache Answer framework components or version information.\n\n- **TLS Certificate Clues**  \n  - TLS certificates generally do not reveal the application version but may provide clues about the hosting environment.\n\n- **robots.txt or sitemap.xml**  \n  - These files may expose API routes, asset directories, or versioned paths indicative of the Apache Answer installation.\n\n- **Raw Socket/Banner Grabs**  \n  - Since Apache Answer is a web application, raw socket/banner grabbing is not generally applicable.\n\n- **Any Custom Protocol if Applicable**  \n  - None; Apache Answer operates over standard HTTP/HTTPS.\n\n- **Java-specific Techniques**  \n  - Not applicable; Apache Answer is mainly built with Golang backend and React frontend.\n\n## 4. Indirect or Fingerprintable Signs of Version/Presence  \nWhen explicit version information is unavailable, the following indirect signs may be used to fingerprint Apache Answer:\n\n- **Static Asset Naming/Hash Patterns**  \n  - Javascript or CSS files with naming patterns or version hashes specific to Apache Answer releases.\n\n- **Unique HTML Structures**  \n  - Distinct page layouts or DOM structures characteristic of the React-based frontend of Apache Answer.\n\n- **Field Names in API Responses**  \n  - Unique JSON field names or response structures in API replies that match Apache Answer's schema.\n\n- **Plugin Paths**  \n  - URLs indicating plugins or extensions specific to Apache Answer.\n\n- **Stack Traces or Internal File References**  \n  - Debug or error messages referencing Apache Answer or its internal modules.\n\n- **Error Page Structure**  \n  - Custom error pages styled or generated by Apache Answer with identifiable markup or messaging.\n\n- **Any Response Headers or Clues That Can Be Fingerprinted**  \n  - Headers revealing underlying backend frameworks, or custom headers set by Apache Answer plugins.\n\n## 5. Summary Table  \n\n| Detection Vector          | Example Output / Signature                                   | Notes                                    |\n|--------------------------|--------------------------------------------------------------|------------------------------------------|\n| HTTP Headers             | Standard HTTP headers, rarely customized revealing version   | Usually no explicit version info         |\n| HTML Body                | Meta tags or footer mentions \"Apache Answer\"                 | Possible version if branding left intact|\n| API Endpoints            | API JSON responses with unique field names                   | Version may be exposed in API metadata   |\n| Static Asset Paths       | JS/CSS files named with version hashes or specific patterns  | Helps identify presence                   |\n| Error Messages           | Stack traces or debug info referencing Apache Answer         | May leak version if verbose errors exposed|\n| TLS Certificate          | Certificates reveal hosting environment but not version      | Indirect clues only                       |\n| robots.txt / sitemap.xml | Contains API or asset paths with Apache Answer identifiers   | Useful for footprinting                   |\n| Raw Socket/Banner Grabs  | Not applicable                                               | Web application over HTTP(s) only        |\n| Custom Protocol          | None                                                        | Only standard HTTP(s)                     |\n| Java-specific Techniques | Not applicable                                              | Backend primarily Golang                  |",
          "created_at": "2025-09-29T10:22:28.857635Z",
          "updated_at": "2025-09-29T10:22:28.857640Z",
          "detection_methods": [
            {
              "name": "Asset Hash Analysis",
              "protocol": "HTTP",
              "code_snippets": [
                {
                  "code_language": "python",
                  "code_content": "import requests\nimport re\n\nclass ApacheAnswer:\n    KNOWN_VERSIONS = {\n        \"dadb9922\": \"1.4.1\",\n        \"1c3bc641\": \"1.5.1\"\n    }\n    KNOWN_PATHS = [\"/users/\"]\n\n    def __init__(self, base_url):\n        self.base_url = base_url\n        self.version = None\n\n    def fetch_page(self, path=\"/\"):\n        try:\n            url = self.base_url.rstrip(\"/\") + path\n            resp = requests.get(url)\n            if resp.status_code == 200:\n                return resp.text\n        except:\n            return None\n        return None\n\n    def detect_version(self):\n        for path in self.KNOWN_PATHS:\n            body = self.fetch_page(path)\n            if not body:\n                continue\n            pattern = r\"(?:main|app|index|style|runtime~main)\\.(?P<hash>[0-9a-f]{8})\\.(?:js|css)\"\n            matches = re.findall(pattern, body)\n            for js_hash in matches:\n                if js_hash in self.KNOWN_VERSIONS:\n                    self.version = self.KNOWN_VERSIONS[js_hash]\n                    return self.version\n        return None\n\n    @staticmethod\n    def vendor():\n        return \"Apache\"\n\n    @staticmethod\n    def product():\n        return \"Answer\"\n\n# Example usage:\napp = ApacheAnswer(\"http://localhost:8080\")\nprint(\"Detected Version:\", app.detect_version())"
                },
                {
                  "code_language": "ruby",
                  "code_content": "require 'net/http'\nrequire 'uri'\nrequire 'json' # Only used if you needed JSON processing, but good practice to include for web tasks\n\n# Represents a utility for detecting the version of an Apache Answer instance\n# running at a given base URL by examining JavaScript asset hashes.\nclass ApacheAnswer\n  # Known JS hash-to-version mappings.\n  KNOWN_VERSIONS = {\n    \"dadb9922\" => \"1.4.1\",\n    \"1c3bc641\" => \"1.5.1\"\n  }.freeze\n\n  # Known paths to check for version-identifying assets.\n  KNOWN_PATHS = [\"/users/\"].freeze\n\n  # Initialize the detector with the target base URL.\n  #\n  # @param base_url [String] The root URL of the target Apache Answer instance.\n  def initialize(base_url)\n    @base_url = base_url\n    @version = nil\n  end\n\n  # Fetches the HTML content of a given path on the base URL.\n  #\n  # @param path [String] The path to fetch (defaults to '/').\n  # @return [String, nil] The response body if status is 200, otherwise nil.\n  def fetch_page(path = \"/\")\n    # Use URI.join to safely combine the base URL and the path\n    url = URI.join(@base_url, path)\n\n    begin\n      # Perform the GET request\n      response = Net::HTTP.get_response(url)\n\n      if response.code == '200'\n        return response.body\n      else\n        # Return nil for non-200 responses\n        puts \"DEBUG: Received status code #{response.code} for #{url}\"\n        return nil\n      end\n    rescue StandardError => e\n      # Handle network errors, connection failures, etc.\n      puts \"ERROR: Failed to fetch #{url}: #{e.message}\"\n      return nil\n    end\n  end\n\n  # Attempts to detect the Apache Answer version by looking for hashed\n  # JavaScript asset names in known pages.\n  #\n  # @return [String, nil] The detected version string, or nil if not found.\n  def detect_version\n    puts \"INFO: Attempting to detect version for #{@base_url}\"\n\n    # Regex to find the 8-character hash in asset names like 'main.dadb9922.js'\n    # The hash is captured in the first group ($1 in Ruby match results).\n    pattern = /(?:main|app|index|style|runtime~main)\\.([0-9a-f]{8})\\.(?:js|css)/\n\n    KNOWN_PATHS.each do |path|\n      body = fetch_page(path)\n      next unless body # Skip if fetch failed\n\n      # String#scan finds all non-overlapping matches and returns an array of\n      # capture groups.\n      matches = body.scan(pattern)\n\n      matches.each do |match|\n        # In Ruby, match is an array of captured groups. We only have one group (the hash).\n        js_hash = match[0]\n\n        if KNOWN_VERSIONS.key?(js_hash)\n          @version = KNOWN_VERSVERSIONS[js_hash]\n          puts \"SUCCESS: Detected version #{@version} from hash #{js_hash} at path #{path}\"\n          return @version\n        end\n      end\n    end\n\n    puts \"INFO: Could not determine version using known hashes.\"\n    return nil\n  end\n\n  # Class method to return the vendor name.\n  # In Ruby, this is a class method defined using `self.method_name`.\n  #\n  # @return [String]\n  def self.vendor\n    \"Apache\"\n  end\n\n  # Class method to return the product name.\n  #\n  # @return [String]\n  def self.product\n    \"Answer\"\n  end\nend\n\n# Example usage (assuming an instance is running at http://localhost:8080)\n# NOTE: If you run this file, you must have a service running at this address\n# that returns an HTML body containing one of the KNOWN_VERSIONS hashes.\n\n# app = ApacheAnswer.new(\"http://localhost:8080\")\n# puts \"Product Vendor: #{ApacheAnswer.vendor}\"\n# puts \"Product Name: #{ApacheAnswer.product}\"\n# puts \"Detected Version: #{app.detect_version}\""
                }
              ],
              "expected_response": "1.4.1",
              "requires_auth": false,
              "created_at": "2025-09-29T11:11:02.080468Z",
              "updated_at": "2025-09-29T11:11:02.080474Z"
            }
          ],
          "setup_guides": []
        },
        {
          "name": "Spark",
          "category": "Service Application",
          "description": "# Apache Spark Detailed Information\n\n## 1. What is this product used for?  \nApache Spark is an open-source, distributed computing system designed for big data processing and analytics, enabling fast and efficient handling of large-scale data workloads including batch processing, real-time analytics, machine learning, and graph processing.\n\n## 2. What is the type of this software?  \n- Service Application\n\n## 3. Remote Version Detection Methods (No Credentials Required)  \nPossible methods a scanner can use to detect Apache Spark or glean version information remotely:\n\n- **HTTP headers**  \n  - Spark is often deployed as part of a cluster with web UIs for job tracking which expose certain HTTP headers revealing Spark versions or components (e.g., Spark Master or Spark History Server).\n\n- **HTML body (e.g., meta tags, footers)**  \n  - The Spark Web UI typically displays version details on its pages, including the Web UI footer and header sections.\n\n- **API endpoints**  \n  - Spark exposes REST API endpoints for job and cluster monitoring which can leak version information, e.g., `/api/v1/version`.\n\n- **Static asset paths (JS/CSS)**  \n  - Spark web UI assets may have identifiable naming or version hashes in their file names.\n\n- **Error messages or stack traces**  \n  - Errors or logs accessible through the web interfaces might contain version and deployment details.\n\n- **TLS certificate clues**  \n  - TLS certificates usually only expose hosting information, not application version.\n\n- **robots.txt or sitemap.xml**  \n  - These are generally not specific to Spark but could expose endpoints or UI paths.\n\n- **Raw socket/banner grabs**  \n  - Not applicable, as Spark services communicate over HTTP/HTTPS and custom ports without banner info.\n\n- **Any custom protocol if applicable**  \n  - Spark uses standard HTTP/HTTPS; no proprietary protocol for version detection.\n\n- **Java-specific techniques**  \n  - Yes, Spark is Java/Scala-based; version detection may leverage JVM management interfaces or Java-related headers if accessible, but typically not remotely.\n\n## 4. Indirect or Fingerprintable Signs of Version/Presence  \nWhen explicit version info is missing, fallback fingerprinting includes:\n\n- **Static asset naming/hash patterns**  \n  - The Spark UI assets (JS, CSS) have distinctive naming conventions tied to Spark versions.\n\n- **Unique HTML structures**  \n  - The Spark Web UI has a unique layout and element IDs/classes that can identify it.\n\n- **Field names in API responses**  \n  - Spark REST API responses contain specific fields indicating its presence.\n\n- **Plugin paths**  \n  - Not typical for standard Spark deployments.\n\n- **Stack traces or internal file references**  \n  - Logs or error pages displayed in UI might reveal internal classes or version info.\n\n- **Error page structure**  \n  - Spark error pages follow a recognizable format.\n\n- **Any response headers or clues that can be fingerprinted**  \n  - Headers like `X-Powered-By` may disclose Spark or underlying server info.\n\n## 5. Summary Table  \n\n| Detection Vector          | Example Output / Signature                                 | Notes                                   |\n|--------------------------|------------------------------------------------------------|-----------------------------------------|\n| HTTP Headers             | `X-Powered-By: Apache Spark` (if configured)               | Optional, depends on setup               |\n| HTML Body                | Web UI footer showing \"Spark 3.4.0\"                         | Direct version information               |\n| API Endpoints            | `/api/v1/version` endpoint returning JSON version info      | Accurate version if server accessible    |\n| Static Asset Paths       | Asset files like `spark-core-3.4.0.js`                      | Useful for version fingerprinting       |\n| Error Messages           | Stack traces with class names or version strings            | May expose detailed info                 |\n| TLS Certificate          | Certificates with hosting domain info                       | No version information                   |\n| robots.txt / sitemap.xml | Potential exposure of UI or API endpoints                   | Useful for footprinting                  |\n| Raw Socket/Banner Grabs  | N/A                                                        | Not applicable                          |\n| Custom Protocol          | N/A                                                        | Standard HTTP/HTTPS                      |\n| Java-specific Techniques | JVM info via managed interfaces (not typically remote)      | Java-based application                   |",
          "created_at": "2025-09-29T10:22:28.863905Z",
          "updated_at": "2025-09-29T10:22:28.863910Z",
          "detection_methods": [],
          "setup_guides": []
        },
        {
          "name": "Pulsar",
          "category": "Service Application",
          "description": "# Apache Pulsar Detailed Information\n\n## 1. What is this product used for?  \nApache Pulsar is a distributed, open-source messaging and streaming platform designed for high-throughput, low-latency data streaming and event-driven applications, commonly used for real-time analytics, messaging queues, and event sourcing.\n\n## 2. What is the type of this software?  \n- Service Application\n\n## 3. Remote Version Detection Methods (No Credentials Required)  \nTechniques a scanner can use to detect Apache Pulsar presence or version remotely without credentials:\n\n- **HTTP headers**  \n  - Pulsar brokers and web services may expose headers containing product name or version, though often limited.  \n  - Some admin REST API endpoints may reveal version info in headers or JSON responses if accessible.\n\n- **HTML body (e.g., meta tags, footers)**  \n  - Web UIs like Pulsar Manager may include meta tags or page footers indicating the Pulsar version or product name.\n\n- **API endpoints**  \n  - Pulsar provides REST admin API endpoints which may expose version information, e.g., `/admin/v2/brokers/version`.\n\n- **Static asset paths (JS/CSS)**  \n  - Assets served by Pulsar Manager or web UI interfaces sometimes include versioned filenames or identifiable static resources.\n\n- **Error messages or stack traces**  \n  - Error pages or response messages might contain product and version details, especially if debugging info leaks.\n\n- **TLS certificate clues**  \n  - Certificates will typically reflect the hosting domain, not specifically Pulsar version.\n\n- **robots.txt or sitemap.xml**  \n  - May disclose accessible endpoints or API paths helpful for fingerprinting but usually no version data.\n\n- **Raw socket/banner grabs**  \n  - Pulsar uses custom protocols over TCP (e.g., Pulsar binary protocol on port 6650) but banner grabbing standard services usually do not reveal version.\n\n- **Any custom protocol if applicable**  \n  - Pulsar uses proprietary binary protocols for messaging, which may be fingerprinted by behavior but rarely reveal version info remotely.\n\n- **Java-specific techniques**  \n  - Pulsar is JVM-based; remote Java JMX connections or debugging interfaces (rarely exposed publicly) might reveal detailed version info.\n\n## 4. Indirect or Fingerprintable Signs of Version/Presence  \n\n- **Static asset naming/hash patterns**  \n  - Version identifiers within filenames for Pulsar Manager UI assets.\n\n- **Unique HTML structures**  \n  - Pulsar Manager and other UIs have characteristic layouts and DOM elements.\n\n- **Field names in API responses**  \n  - Unique response structures from admin API indicating Pulsar service type.\n\n- **Plugin paths**  \n  - Custom extensions/plugins may have identifiable URLs if exposed.\n\n- **Stack traces or internal file references**  \n  - Error/debug logs showing Pulsar-specific Java class names.\n\n- **Error page structure**  \n  - Pulsar’s error pages follow a recognizable pattern in web UI.\n\n- **Any response headers or clues that can be fingerprinted**  \n  - Certain HTTP headers or Pulsar-specific protocol behaviors can help identify presence.\n\n## 5. Summary Table  \n\n| Detection Vector          | Example Output / Signature                                | Notes                                    |\n|--------------------------|-----------------------------------------------------------|-----------------------------------------|\n| HTTP Headers             | Headers from REST API indicating Pulsar version           | Depends on exposure settings              |\n| HTML Body                | Meta tags or footers in Pulsar Manager pages              | May include product and version info     |\n| API Endpoints            | `/admin/v2/brokers/version` JSON response                  | Precise version if endpoint accessible   |\n| Static Asset Paths       | Versioned JS/CSS filenames                                 | Useful for fingerprinting                |\n| Error Messages           | Java stack traces, Pulsar class names                      | May reveal build info                    |\n| TLS Certificate          | Hosting domain info                                        | No version info                          |\n| robots.txt / sitemap.xml | Endpoint disclosure                                        | Aids footprinting                        |\n| Raw Socket/Banner Grabs  | Pulsar TCP protocol behavior                              | Limited version info                     |\n| Custom Protocol          | Pulsar binary protocol over TCP                            | Protocol specifics can aid identification|\n| Java-specific Techniques | JVM info via JMX (if exposed)                               | Not typical for remote unauthenticated  |",
          "created_at": "2025-09-29T10:22:28.870223Z",
          "updated_at": "2025-09-29T10:22:28.870228Z",
          "detection_methods": [
            {
              "name": "Endpoint Enumeration",
              "protocol": "HTTP",
              "code_snippets": [
                {
                  "code_language": "ruby",
                  "code_content": "require 'net/http'\nrequire 'uri'\n\ndef get_http_response(method, path, host = 'localhost', port = 8080)\n  uri = URI.parse(\"http://#{host}:#{port}#{path}\")\n  Net::HTTP.start(uri.host, uri.port) do |http|\n    case method.upcase\n    when \"GET\"\n      http.get(uri)\n    else\n      raise \"Unsupported method: #{method}\"\n    end\n  end\nend\n\ndef get_pulsar_info\n  response = get_http_response(\"GET\", \"/metrics/\")\n  status_code = response.respond_to?(:code) ? response.code : nil\n  return {} unless status_code.to_i == 200\n\n  body = response.respond_to?(:body) ? response.body : \"\"\n  \n  regex = /pulsar_version_info\\{cluster=\"(?<cluster>[^\"]+)\",version=\"(?<version>[\\d\\.]+)\",commit=\"(?<commit>[a-f0-9]+)\"\\}/\n  match = body.match(regex)\n  match ? match.named_captures.compact : {}\nend\n\napplications = Hash.new { |h, k| h[k] = [] }\n\npulsar_info = get_pulsar_info\nif pulsar_info && pulsar_info[\"version\"]\n  applications[[\"apache:pulsar\", nil]] << pulsar_info[\"version\"]\nend\n\nputs \"Applications: #{applications}\""
                },
                {
                  "code_language": "python",
                  "code_content": "import requests\nimport re\nfrom collections import defaultdict\n\ndef get_pulsar_info(host=\"localhost\", port=8080):\n    try:\n        url = f\"http://{host}:{port}/metrics/\"\n        response = requests.get(url)\n        if response.status_code != 200:\n            return {}\n        body = response.text\n        regex = r'pulsar_version_info\\{cluster=\"(?P<cluster>[^\"]+)\",version=\"(?P<version>[\\d\\.]+)\",commit=\"(?P<commit>[a-f0-9]+)\"\\}'\n        match = re.search(regex, body)\n        return match.groupdict() if match else {}\n    except Exception as e:\n        print(f\"Error: {e}\")\n        return {}\n\napplications = defaultdict(list)\n\npulsar_info = get_pulsar_info()\nif pulsar_info and \"version\" in pulsar_info:\n    applications[(\"apache:pulsar\", None)].append(pulsar_info[\"version\"])\n\nprint(\"Applications:\", dict(applications))"
                }
              ],
              "expected_response": "{\n  \"applications\" => { [\"apache:pulsar\", nil] => [\"2.10.1\"] },\n  \"pulsar_info\" => {\n    \"cluster\" => \"standalone\",\n    \"version\" => \"2.10.1\",\n    \"commit\" => \"a1b2c3d4e5f6\"\n  }\n}",
              "requires_auth": false,
              "created_at": "2025-09-29T11:06:03.003415Z",
              "updated_at": "2025-09-29T11:06:03.003421Z"
            }
          ],
          "setup_guides": []
        },
        {
          "name": "CXF",
          "category": "",
          "description": "## 1. What is this product used for?\nApache CXF is an open source web services framework used to develop and expose services using standards-based APIs such as JAX-WS (SOAP) and JAX-RS (RESTful)[web:30][web:31][web:36][web:38]. It enables Java applications to create, publish, and consume SOAP and REST services in enterprise and SOA environments[web:30][web:31][web:35][web:36].\n\n## 2. What is the type of this software?\nApache CXF is classified as a **Library** for Java developers and as a **Service Application** when deployed as part of a running server-side application[web:30][web:31][web:36][web:38].\n\n## 3. Remote Version Detection Methods (No Credentials Required)\n- **HTTP headers:**  \n  Some deployments may set HTTP headers such as `Server` or custom headers (e.g., `X-Cxf-Version`) that could disclose software or library version.\n- **HTML body (meta tags, footers):**  \n  Not typical, though demo/sample endpoints may include version disclosures in comment tags or banners.\n- **API endpoints:**  \n  Out-of-the-box CXF exposes default service listings (e.g., `/services`, `/cxf`) that sometimes return WSDLs or listings containing version, build, or copyright.\n- **Static asset paths (JS/CSS):**  \n  Not common, as CXF primarily handles XML/JSON, but web frontends for CXF admin or demos may have static assets with versioned names.\n- **Error messages or stack traces:**  \n  Detailed faults (especially in development mode) often reveal CXF versions, Java package structures, and library versions in stack traces or SOAP faults.\n- **TLS certificate clues:**  \n  Rare—CXF itself does not control signing info, but developers may leak info in organization fields of test certificates.\n- **robots.txt or sitemap.xml:**  \n  Not typically populated by CXF, but can be checked for generic `/services` or `/cxf` route mentions.\n- **Raw socket/banner grabs:**  \n  As CXF runs under a Java app server (Jetty, Tomcat, etc.), banners pertain to that server, not CXF itself.\n- **Custom protocol:**  \n  Not applicable; all CXF services are HTTP(S)-based.\n- **Java-specific techniques:**  \n  Stack traces generated by errors or debug pages may mention `org.apache.cxf` with explicit version and package info, which are directly useful for fingerprinting CXF.\n\n## 4. Indirect or Fingerprintable Signs of Version/Presence\n- **Static asset naming/hash patterns:**  \n  Unusual except for admin GUIs or demos, where asset versions may appear.\n- **Unique HTML structures:**  \n  The default `/services` or `/cxf` listing exposes a CXF-styled service list with the phrase \"Apache CXF\" and possibly artifact versions in comments or banners.\n- **Field names in API responses:**  \n  WSDL and API documents referencing `http://cxf.apache.org` namespaces, or in-service listings.\n- **Plugin paths:**  \n  URLs like `/services`, `/cxf`, or endpoints ending with `?wsdl` are suggestive of CXF.\n- **Stack traces/internal file references:**  \n  SOAP Faults or HTTP 500 errors showing Java stacktraces with `org.apache.cxf` package paths.\n- **Error page structure:**  \n  SOAP Faults or REST error payloads formatted in a way typical to CXF default handlers.\n- **Response headers or cookies:**  \n  Uncommon, but bespoke deployments may set CXF-specific headers for debugging.\n\n## 5. Summary Table\n\n| Detection Vector                | Example Signature/Output                                                  |\n|---------------------------------|--------------------------------------------------------------------------|\n| HTTP headers                    | `X-Cxf-Version: 3.5.2`, or `Server: Jetty(CXF)`                          |\n| HTML meta/footer                | Uncommon, but present in some demos as `<!-- Powered by Apache CXF 3.x -->` |\n| API endpoints                   | `/services`, `/cxf`, `/myService?wsdl` showing \"Apache CXF\" in output    |\n| Static asset paths (JS/CSS)     | Rare—seen in admin GUIs or demos; `/static/cxf-console.3.5.2.js`         |\n| Error messages/stack traces     | SOAP Fault/HTTP 500 page: `org.apache.cxf.binding.soap.SoapFault`        |\n| TLS certificate                 | Organization fields, rare and not specific                               |\n| robots.txt/sitemap.xml          | Not typical, but `/services` or `/cxf` paths may appear                  |\n| Banner grabs                    | App server (Tomcat/Jetty) banners, not CXF-specific                      |\n| Unique HTML structures          | Service list: `<h1>Apache CXF - Services List</h1>`                      |\n| API field patterns              | WSDL with `targetNamespace=\"http://cxf.apache.org\"`                      |\n| Stacktrace/package references   | Error: `at org.apache.cxf.interceptor.Fault`                             |\n",
          "created_at": "2025-09-29T10:47:34.698520Z",
          "updated_at": "2025-09-29T10:47:34.698525Z",
          "detection_methods": [],
          "setup_guides": []
        }
      ]
    },
    {
      "name": "Whitsoft Development",
      "created_at": "2025-09-29T10:22:28.875304Z",
      "updated_at": "2025-09-29T10:22:28.875309Z",
      "products": [
        {
          "name": "Slimftpd",
          "category": "Service Application",
          "description": "## 1. What is this product used for?  \nSlimFTPd is a small, fully standards-compliant FTP server designed for Windows, providing simple and efficient file transfer services with advanced virtual file system support and minimal resource usage.\n\n## 2. What is the type of this software?  \n- Service Application\n\n## 3. Remote Version Detection Methods (No Credentials Required)  \nMethods a scanner can use to detect SlimFTPd and possibly its version remotely without credentials:\n\n- **HTTP headers**  \n  - Not applicable since SlimFTPd is an FTP service, not HTTP-based.\n\n- **HTML body (e.g., meta tags, footers)**  \n  - Not applicable to FTP servers.\n\n- **API endpoints**  \n  - Not applicable.\n\n- **Static asset paths (JS/CSS)**  \n  - Not applicable.\n\n- **Error messages or stack traces**  \n  - FTP banner messages and responses to commands like `SYST` or `HELP` might include version information.\n\n- **TLS certificate clues**  \n  - FTPS deployments may reveal hosting details but generally no version info.\n\n- **robots.txt or sitemap.xml**  \n  - Not applicable.\n\n- **Raw socket/banner grabs**  \n  - Banner grabbing on the FTP port (default port 21) is a common technique. The banner often returns the server name and version, e.g.:  \n    ```\n    220 SlimFTPd 3.181 ready.\n    ```\n\n- **Any custom protocol if applicable**  \n  - Uses standard FTP or FTPS protocols.\n\n- **Java-specific techniques**  \n  - Not applicable; SlimFTPd is written in pure Win32 C++.\n\n## 4. Indirect or Fingerprintable Signs of Version/Presence  \n\n- **Static asset naming/hash patterns**  \n  - Not applicable.\n\n- **Unique HTML structures**  \n  - Not applicable.\n\n- **Field names in API responses**  \n  - Not applicable.\n\n- **Plugin paths**  \n  - Not applicable.\n\n- **Stack traces or internal file references**  \n  - Error messages with distinctive SlimFTPd server info.\n\n- **Error page structure**  \n  - FTP response codes and error messages as implemented by SlimFTPd.\n\n- **Any response headers or clues that can be fingerprinted**  \n  - Server banner and command responses serve as key identifiers.\n\n## 5. Summary Table  \n\n| Detection Vector      | Example Output / Signature          | Notes                               |\n|----------------------|------------------------------------|-----------------------------------|\n| FTP Banner Grab      | `220 SlimFTPd 3.181 ready.`         | Primary method for version detection |\n| FTP Command Responses| Unique responses to FTP commands    | Helps confirm presence             |\n| TLS Certificate      | Hosting details if FTPS enabled     | No version info                   |\n| HTTP or API Related  | N/A                               | Not applicable                    |\n| Java Techniques      | N/A                               | Not applicable                    |",
          "created_at": "2025-09-29T10:22:28.879291Z",
          "updated_at": "2025-09-29T10:22:28.879296Z",
          "detection_methods": [
            {
              "name": "FTP banner Grabbing",
              "protocol": "FTP",
              "code_snippets": [
                {
                  "code_language": "python",
                  "code_content": "import socket\nimport re\n\ndef get_slimftpd_version(host, port=21, timeout=5):\n    try:\n        # open socket to FTP port\n        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        s.settimeout(timeout)\n        s.connect((host, port))\n\n        # read the banner\n        banner = s.recv(1024).decode(errors=\"ignore\").strip()\n        s.close()\n\n        # regex to extract version (e.g., \"220 SlimFTPd 3.18 ready.\")\n        match = re.search(r\"SlimFTPd\\s+([0-9]+(?:\\.[0-9]+){1,3})\", banner, re.I)\n        if match:\n            version = match.group(1)\n            return version\n        else:\n            print(\"[-] SlimFTPd detected, but version not found in banner.\")\n            return None\n\n    except Exception as e:\n        print(f\"[!] Error connecting: {e}\")\n        return None\n\nif __name__ == \"__main__\":\n    target_host = \"127.0.0.1\"   # change this to your SlimFTPd host\n    get_slimftpd_version(target_host)\n"
                },
                {
                  "code_language": "ruby",
                  "code_content": "require 'socket'\n\ndef get_slimftpd_version(host, port=21, timeout=5)\n  begin\n    # open socket to FTP port\n    s = TCPSocket.new(host, port)\n    s.setsockopt(Socket::SOL_SOCKET, Socket::SO_RCVTIMEO, [timeout, 0].pack('l_2'))\n\n    # read the banner\n    banner = s.recv(1024).force_encoding('UTF-8').strip\n    s.close\n\n    # regex to extract version (e.g., \"220 SlimFTPd 3.18 ready.\")\n    if banner =~ /SlimFTPd\\s+([0-9]+(?:\\.[0-9]+){1,3})/i\n      version = $1\n      puts \"[+] Detected SlimFTPd version: #{version}\"\n      return version\n    else\n      puts \"[-] SlimFTPd detected, but version not found in banner.\"\n      return nil\n    end\n\n  rescue => e\n    puts \"[!] Error connecting: #{e}\"\n    return nil\n  end\nend\n\nif __FILE__ == $PROGRAM_NAME\n  target_host = \"192.168.52.128\"   # change this to your SlimFTPd host\n  get_slimftpd_version(target_host)\nend\n"
                }
              ],
              "expected_response": "3.18",
              "requires_auth": false,
              "created_at": "2025-09-29T10:22:28.884035Z",
              "updated_at": "2025-09-29T10:22:28.884040Z"
            }
          ],
          "setup_guides": [
            {
              "instructions": "# Whitsoft Development slimftpd Server Installation and Configuration Guide\n\n## Prerequisites\n- Windows XP or later (32-bit or 64-bit)\n- Administrator privileges on your computer\n- Basic familiarity with Windows file management\n\n## 1. Download Instructions\n\n1. Visit the official Whitsoft Development website or search for \"slimftpd server download\"\n2. **Important**: If the main download link is unavailable, you may need to use archived download links from sites like Archive.org or software repositories\n3. Download the latest version of slimftpd server installer (typically named `slimftpd_setup.exe` or similar)\n4. Verify the file is from a trusted source before proceeding\n5. Temporarily disable antivirus software if it flags the installer (remember to re-enable it afterward)\n\n## 2. Installation Steps\n\n1. Right-click on the downloaded installer and select **\"Run as administrator\"**\n2. If Windows displays a security warning, click **\"Yes\"** to allow the installation\n3. The setup wizard will open - click **\"Next\"** to begin\n4. Read and accept the license agreement by checking the box and clicking **\"Next\"**\n5. Choose your installation directory:\n   - Default: `C:\\Program Files\\slimftpd\\` (recommended for most users)\n   - Custom: Click **\"Browse\"** to select a different location\n6. Select additional components if prompted (usually leave defaults selected)\n7. Click **\"Install\"** to begin the installation process\n8. Wait for installation to complete (usually takes 1-2 minutes)\n9. Click **\"Finish\"** when installation is complete\n\n## 3. Initial Startup\n\n1. Navigate to your installation directory (usually `C:\\Program Files\\slimftpd\\`)\n2. Right-click on `slimftpd.exe` and select **\"Run as administrator\"**\n3. The server control panel will open\n4. You'll be prompted to set an administrator password:\n\n### Creating a Strong Administrator Password:\n- Use at least 12 characters\n- Include uppercase and lowercase letters\n- Include numbers and special characters (!@#$%^&*)\n- Avoid dictionary words or personal information\n- Example format: `MyFtp2024!Secure#`\n\n5. Enter your chosen password twice to confirm\n6. Click **\"OK\"** to save the password\n\n---\n\n## Version Compatibility Note\n\nslimftpd Server is compatible with:\n- **Windows XP** (Service Pack 2 or later)\n- **Windows Vista** (all editions)\n- **Windows 7** (all editions)\n- **Windows 8/8.1** (all editions)\n- **Windows 10** (all versions)\n- **Windows 11** (compatibility may vary)\n\n**Architecture Support**: Both 32-bit and 64-bit versions of Windows are supported. This archived version (circa 2007) was primarily designed for 32-bit systems but should work on 64-bit Windows with compatibility mode if needed.",
              "created_at": "2025-09-29T10:22:28.892792Z",
              "updated_at": "2025-09-29T10:22:28.892797Z"
            }
          ]
        }
      ]
    },
    {
      "name": "Ethereum",
      "created_at": "2025-09-29T10:22:28.896657Z",
      "updated_at": "2025-09-29T10:22:28.896663Z",
      "products": [
        {
          "name": "Go Ethereum",
          "category": "Web Application",
          "description": "# Go Ethereum (Geth):\n\n## 1. What is this product used for?\n\nGo Ethereum (Geth) is a software client that enables interaction with the Ethereum blockchain, allowing operation of a full node, validation of transactions, deployment of smart contracts, and participation in the network’s consensus and mining activities[web:1][web:5][web:6][web:13][web:14][web:17].\n\n## 2. What is the type of this software?\n\n- Standalone Application\n- Service Application (when run as a networked node or exposing APIs)\n\n## 3. Remote Version Detection Methods (No Credentials Required)\n\n- **HTTP headers**  \n  Not applicable; Geth typically does not serve HTTP content directly. However, if running an RPC endpoint behind a proxy, indirect clues might be present (such as server headers if RPC is exposed)[web:7].\n\n- **HTML body (meta tags, footers)**  \n  Not applicable; Geth does not serve HTML content.\n\n- **API endpoints**  \n  The JSON-RPC API may expose subtle implementation-specific clues (method support, error messages, or response formatting) but does not disclose explicit version strings by default. Some endpoints (`admin`, `debug`) may provide more details if enabled[web:5][web:7].\n\n- **Static asset paths (JS/CSS)**  \n  Not applicable; Geth does not serve web assets.\n\n- **Error messages or stack traces**  \n  Error responses from exposed RPC endpoints can contain patterns unique to a specific Geth version or build. Response formatting and phrasing can be implied fingerprinting vectors[web:7].\n\n- **TLS certificate clues**  \n  If running with HTTPS enabled for RPC APIs, TLS certificates (fields such as Organization, Issuer) can hint at default setups but typically do not reveal specific version information.\n\n- **robots.txt or sitemap.xml**  \n  Not applicable; Geth does not serve web crawler files.\n\n- **Raw socket/banner grabs**  \n  On the P2P Discovery Protocol (usually TCP 30303) during protocol handshake, the client exposes its version string (e.g., `Geth/v1.10.13-stable/linux-amd64/go1.17.5 les/2`). This string is visible in the Ethereum Node Discovery or RLPx handshake metadata and is the most reliable remote version fingerprint[web:7].\n\n- **Any custom protocol if applicable**  \n  The Ethereum Node Discovery and peer-to-peer RLPx protocols are relevant. When a handshake is performed, the client will send a `Hello` packet containing the client name (e.g., `Geth`), version, OS, and supported protocols. Specialized scanners can extract this information without credentials.\n\n- **Java-specific techniques**  \n  Not applicable; Go Ethereum is implemented in Go, not Java.\n\n## 4. Indirect or Fingerprintable Signs of Version/Presence\n\n- **Static asset naming/hash patterns**  \n  Not applicable; Geth does not serve static assets.\n\n- **Unique HTML structures**  \n  Not applicable.\n\n- **Field names in API responses**  \n  Presence and ordering of JSON fields, error code naming, and supported method names in the RPC API can indicate Geth (vs. other clients) and narrow down versions if methods are newly added or deprecated[web:5][web:7].\n\n- **Plugin paths**  \n  Not applicable.\n\n- **Stack traces or internal file references**  \n  Detailed error messages from RPC endpoints can sometimes reference internal Go file names or line numbers, especially in debug builds, offering clues to client and version.\n\n- **Error page structure**  \n  Not applicable.\n\n- **Any response headers or clues that can be fingerprinted**  \n  Some default headers from reverse proxies or API gateways (e.g., \"Server: Go-http-kit\") may indirectly indicate Go-based software, but these are generic and not exclusive to Geth.\n\n- **Protocol handshake output**  \n  Node Discovery and RLPx handshake exchange a client string that contains implementation name (`Geth`), version, platform, and supported subprotocols (this is the canonical version fingerprint for Geth running as an Ethereum network node)[web:7].\n\n## 5. Summary Table\n\n| Detection Vector                     | Example Output / Signature                                      | Applies               |\n|--------------------------------------|----------------------------------------------------------------|-----------------------|\n| RLPx/Node Handshake Packet           | `Geth/v1.10.13-stable/linux-amd64/go1.17.5 les/2`              | Yes                   |\n| JSON-RPC API Method Patterns         | Method availability, response style, error message phrasing     | Yes                   |\n| RPC Endpoint Error Formatting        | Go error stack, field names, phrasing unique to Geth            | Yes                   |\n| HTTP Headers (proxied/API)           | `Server: Go-http-kit`, generic Go HTTP headers                  | Indirect/Fallback     |\n| TLS Certificate Details              | Subject/Organization may indicate default setups                | Rare/Indirect         |\n| Static HTML/JS/CSS Asset Paths       | Not applicable                                                  | N/A                   |\n| robots.txt, sitemap.xml              | Not applicable                                                  | N/A                   |\n| Java-specific Banners                | Not applicable                                                  | N/A                   |\n\n",
          "created_at": "2025-09-29T10:22:28.900765Z",
          "updated_at": "2025-09-29T10:22:28.900770Z",
          "detection_methods": [],
          "setup_guides": []
        }
      ]
    },
    {
      "name": "Elastic",
      "created_at": "2025-09-29T10:22:28.905455Z",
      "updated_at": "2025-09-29T10:22:28.905460Z",
      "products": [
        {
          "name": "Kibana",
          "category": "Web Application",
          "description": "## 1. What is this product used for?\n\nKibana is a visualization and analytics platform for Elasticsearch, enabling users to explore, analyze, and visualize data stored in Elasticsearch indices through interactive dashboards and search interfaces.\n\n## 2. What is the type of this software?\n\nWeb Application\n\n## 3. Remote Version Detection Methods (No Credentials Required)\n\n### HTTP Headers\n\nThe Server response header may sometimes include Kibana version (e.g., kbn-version: 8.3.0).\n\nSome responses include custom Kibana headers such as kbn-name, kbn-xpack-sig, or x-powered-by-kibana that may leak version info.\n\nExample:\n\n```\nkbn-version: 8.13.0\n```\n\n### HTML Body (Meta Tags, Footers)\n\nThe main Kibana login page (/, /login, /app/kibana) may embed a kbn-version meta tag in the HTML head.\n\nVersion info may be present in comments, static asset URLs, or footer copyright.\n\nExample:\n\n```xml\n<meta name=\"kbn-version\" content=\"8.13.0\">\n```\n\n### API Endpoints\n\nUnauthenticated endpoints such as /api/status, /status, /api/v1/status, or /api/v1/ping often return JSON including Kibana version.\n\nExample:\n\n```json\n{\n  \"version\": {\n    \"number\": \"8.13.0\"\n  }\n}\n```\n\n### Static Asset Paths (JS/CSS)\n\nURLs to JS/CSS often contain the version string in the path or filename, such as /bundles/app/kibana/bootstrap.js?v=8.13.0\n\nCache-busting asset URLs may include hashes related to version.\n\nExample:\n```\n/ui/assets/kibana.bundle.js?v=8.13.0\n```\n\n### Error Messages or Stack Traces\n\nSome error pages display Kibana version in stack traces or JSON error response.\n\nExample:\n\n```\nError: Kibana server version 8.13.0 not compatible\n```\n\n### TLS Certificate Clues\n\nKibana uses standard HTTPS. TLS certificates usually do not leak Kibana version.\n\n### robots.txt or sitemap.xml\n\nThese files are present but typically do not reference version information directly.\n\n### Raw Socket/Banner Grabs\n\nKibana does not provide a raw socket banner; it only exposes HTTP(S).\n\n### Custom Protocol\n\nNo custom protocol; Kibana is served over HTTP/HTTPS.\n\n### Java-specific Techniques\n\nNot applicable. Kibana is primarily a Node.js application.\n\n## 4. Indirect or Fingerprintable Signs of Version/Presence\n\n**Asset paths:** JS or CSS cache-busting hashes may change between versions.\n\n**HTML structure:** Page structure and specific IDs/classes may differ between major releases.\n\n**API fields:** Field names and JSON schema in /api/status or /api/v1/status may change slightly between versions.\n\n**Error page:** Layout and wording of Kibana error pages can be fingerprinted.\n\n**Response Headers:** Presence of headers like kbn-xpack-sig, even without explicit version, indicate Kibana presence.\n\n**Cookie Names:** Cookies such as sid, kbn-xsrf are present only on Kibana installations.\n\n**Plugin endpoints:** Paths like /api/canvas or /api/console suggest installed plugins unique to certain versions/installations.\n\n## 5. Summary Table\n\n| Detection Technique        | Example Output/Signature                     | Direct Version? |\n|---------------------------|----------------------------------------------|-----------------|\n| HTTP Header               | `kbn-version: 8.13.0`                        | Yes             |\n| Meta Tag                  | `<meta name=\"kbn-version\" content=\"8.13.0\">` | Yes             |\n| API Endpoint              | `GET /api/status` → `\"version\": \"8.13.0\"`    | Yes             |\n| Static Asset Path         | `/bundles/app.js?v=8.13.0`                   | Yes             |\n| Error Message             | `Error: Kibana server version 8.13.0`        | Yes             |\n| TLS Certificate           | No version clues                             | No              |\n| Raw Banner                | Not available                                | No              |\n| Plugin Endpoint           | `/api/canvas`, `/api/console`                | Presence only   |\n| Cookie Names              | `sid`, `kbn-xsrf`                            | Presence only   |\n| HTML Structure            | Unique page structure/layout                  | Indirect        |\n| Response Header           | `kbn-name`, `kbn-xpack-sig`                  | Indirect        |",
          "created_at": "2025-09-29T10:22:28.909595Z",
          "updated_at": "2025-09-29T10:22:28.909599Z",
          "detection_methods": [
            {
              "name": "HTTP Header Detection",
              "protocol": "HTTP",
              "code_snippets": [
                {
                  "code_language": "curl",
                  "code_content": "curl -s http://target.com/api/status | grep -i version"
                }
              ],
              "expected_response": "",
              "requires_auth": false,
              "created_at": "2025-09-29T10:22:28.914055Z",
              "updated_at": "2025-09-29T10:22:28.914060Z"
            }
          ],
          "setup_guides": [
            {
              "instructions": "# Step-by-Step Guide to Set Up ELK Stack Using Docker\n\n## 1. Create the ELK directory\n\nFirst, create a folder for your ELK project:\n\n```bash\nmkdir ~/elk\ncd ~/elk\n```\n\n## 2. Create docker-compose.yml file\n\nNow, create and edit the docker-compose.yml file:\n\n```bash\nnano docker-compose.yml\n```\n\nPaste the following content inside the file:\n\n```yaml\nversion: \"2.2\"\nservices:\n  elasticsearch:\n    image: docker.elastic.co/elasticsearch/elasticsearch:8.1.3\n    container_name: es81\n    environment:\n      - discovery.type=single-node\n      - xpack.security.enabled=false\n    ports:\n      - \"9200:9200\"\n    networks:\n      - elk\n  kibana:\n    image: docker.elastic.co/kibana/kibana:8.1.3\n    container_name: kibana81\n    environment:\n      - ELASTICSEARCH_HOSTS=http://es81:9200\n    ports:\n      - \"5601:5601\"\n    depends_on:\n      - elasticsearch\n    networks:\n      - elk\n  logstash:\n    image: docker.elastic.co/logstash/logstash:8.1.3\n    container_name: logstash81\n    volumes:\n      - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf\n    ports:\n      - \"5044:5044\"\n      - \"9600:9600\"\n    depends_on:\n      - elasticsearch\n    networks:\n      - elk\nnetworks:\n  elk:\n    driver: bridge\n```\n\nPress `CTRL+X`, then `Y`, and hit `Enter` to save and exit.\n\n## 3. Create logstash.conf file\n\nNow, create and edit the logstash.conf file:\n\n```bash\nnano logstash.conf\n```\n\nPaste the following content inside:\n\n```conf\ninput {\n  beats {\n    port => 5044\n  }\n}\noutput {\n  stdout {\n    codec => rubydebug\n  }\n}\n```\n\nPress `CTRL+X`, then `Y`, and hit `Enter` to save and exit.\n\n## 4. Start the containers\n\nRun the following command to start the ELK stack containers in detached mode:\n\n```bash\ndocker-compose up -d\n```\n\nThis will pull the necessary images and start the containers in the background.\n\n## 5. Check if the containers are running\n\nAfter a few moments, check if your containers are running:\n\n```bash\ndocker ps\n```\n\nThis should show the three containers: `es81`, `kibana81`, and `logstash81`.\n\n## 6. Access Kibana in your browser\n\nNow, you can open your browser and go to the Kibana interface:\n\n```\nhttp://localhost:5601\n```\n\nKibana should load and connect to Elasticsearch automatically. From here, you can start exploring the Kibana UI.",
              "created_at": "2025-09-29T10:22:28.922595Z",
              "updated_at": "2025-09-29T10:22:28.922600Z"
            }
          ]
        }
      ]
    },
    {
      "name": "Argoproj",
      "created_at": "2025-09-29T10:22:28.926092Z",
      "updated_at": "2025-09-29T10:22:28.926096Z",
      "products": [
        {
          "name": "Argocd",
          "category": "Service Application",
          "description": "# Argo CD Detection Reference\n\n## 1. What is this product used for?\nArgo CD is a declarative, GitOps continuous delivery tool for Kubernetes.  \nIt automates the deployment and synchronization of Kubernetes manifests from a Git repository to target clusters.\n\n## 2. What is the type of this software?\n- Service Application\n\nArgo CD runs as a controller inside a Kubernetes cluster and exposes a web UI and API server.\n\n## 3. Remote Version Detection Methods (No Credentials Required)\n\nA scanner can attempt the following techniques to detect the Argo CD version or confirm its presence without authentication:\n\n- **HTTP Headers**  \n  - `Server` header often shows `argocd-server` or a reverse proxy (e.g., `nginx`).  \n  - `X-Argocd-Version` header is sometimes present in unauthenticated responses (common in older deployments).\n\n- **HTML Body**  \n  - Default login page contains a `<title>Argo CD</title>` tag and React-based HTML.  \n  - The initial HTML may embed a JavaScript variable such as `window.__ARGOCD__APP_VERSION__` or a JSON blob including `\"version\":\"vX.Y.Z\"` in some releases.\n\n- **API Endpoints**  \n  - `GET /api/version` (if not protected by auth) returns JSON like:\n    ```json\n    {\n      \"Version\": \"v2.11.3\",\n      \"BuildDate\": \"...\",\n      \"GitCommit\": \"...\"\n    }\n    ```\n  - `GET /api/v1/settings` may expose build info in older configurations.\n\n- **Static Asset Paths (JS/CSS)**  \n  - Files under `/static/` or `/main.*.js` contain a hash or comment referencing the build version.  \n  - Example path: `/static/js/main.abcdef12.js`.\n\n- **Error Messages or Stack Traces**  \n  - Unauthenticated `404` or `500` pages include a distinctive React error layout (`<div id=\"argo-cd-app\">`).\n\n- **TLS Certificate Clues**  \n  - Default self-signed certificates generated by Argo CD’s installer may use `CN=argocd-server` or contain `O=argoproj`.\n\n- **robots.txt or sitemap.xml**  \n  - By default these files are not present; no version clues.\n\n- **Raw Socket/Banner Grabs**  \n  - Direct TCP banner grabbing on the HTTPS port yields standard TLS responses only.\n\n- **Custom Protocol**  \n  - No custom binary protocol; purely HTTP(S) and gRPC-Web over HTTP/2.\n\n- **Java-Specific Techniques**  \n  - Not applicable; Argo CD is written in Go.\n\n## 4. Indirect or Fingerprintable Signs of Version/Presence\n\nIf direct version strings are unavailable, fallback fingerprinting methods include:\n\n- **Static Asset Naming/Hash Patterns**  \n  - Unique hashed filenames like `/static/js/main.<hash>.js` where the build hash length and pattern are consistent across Argo CD releases.\n\n- **Unique HTML Structures**  \n  - Presence of `<div id=\"argo-cd-app\"></div>` and React initialization scripts.\n\n- **Field Names in API Responses**  \n  - Unauthenticated endpoints may return JSON keys such as `\"status\":\"Unknown\",\"metadata\":{\"creationTimestamp\":...}` consistent with Argo CD’s API schema.\n\n- **Error Page Structure**  \n  - A `404` page with JSON body `{\"error\":\"not found\"}` and header `content-type: application/json` is typical for the API server.\n\n- **Response Headers**  \n  - `X-Frame-Options: DENY`, `X-Content-Type-Options: nosniff`, and sometimes `X-Argocd-Version` if not stripped.\n\n## 5. Summary Table\n\n| Detection Vector          | Technique / Path                    | Example Output or Signature                          |\n|---------------------------|--------------------------------------|------------------------------------------------------|\n| HTTP Header               | `X-Argocd-Version`                  | `X-Argocd-Version: v2.11.3`                          |\n| HTML Body                 | `/` (login page)                    | `<title>Argo CD</title>` and `window.__ARGOCD__APP_VERSION__` |\n| API Endpoint              | `/api/version`                      | `{\"Version\":\"v2.11.3\",\"BuildDate\":\"...\",\"GitCommit\":\"...\"}` |\n| Static Asset Path         | `/static/js/main.<hash>.js`          | File names with long hash, React bundle              |\n| TLS Certificate           | Default self-signed cert            | `CN=argocd-server` or `O=argoproj`                   |\n| Error Page                | Nonexistent path `/foo`             | JSON: `{\"error\":\"not found\"}` with Argo-specific headers |\n| Response Headers (generic)| `Server` or `X-Frame-Options`       | `Server: argocd-server` (if exposed)                 |\n| robots.txt / sitemap.xml  | Not typically present               | N/A                                                  |\n| Raw Socket Banner         | Direct TLS handshake                | No unique plaintext banner                            |\n| Java-specific             | Not applicable                      | N/A                                                  |\n",
          "created_at": "2025-09-29T10:22:28.930475Z",
          "updated_at": "2025-09-29T10:22:28.930480Z",
          "detection_methods": [
            {
              "name": "HTTP API endpoint version enumeration",
              "protocol": "HTTP",
              "code_snippets": [
                {
                  "code_language": "ruby",
                  "code_content": "def detect_argoproj_argo_cd\n            resp = get_http_response(\"GET\", \"/api/version\")\n            return unless resp && resp.body\n            begin\n              json = JSON.parse(resp.body)\n              version = json[\"Version\"]\n              if version\n                # Strip leading v and remove +build metadata\n                clean_version = version.sub(/^v/, '').split('+').first\n                return clean_version.split(\".\")[0..2].join(\".\")\n              end\n            rescue JSON::ParserError\n              # Ignore invalid JSON\n            end\n            nil\n          end"
                },
                {
                  "code_language": "curl",
                  "code_content": "curl -sk https://<ip>:<port_number>/api/version | jq -r '.Version' | sed -E 's/^v//' | cut -d+ -f1 | awk -F. '{print $1\".\"$2\".\"$3}'\n"
                }
              ],
              "expected_response": "2.6.5",
              "requires_auth": false,
              "created_at": "2025-09-29T10:22:28.936675Z",
              "updated_at": "2025-09-29T10:22:28.936680Z"
            }
          ],
          "setup_guides": []
        }
      ]
    },
    {
      "name": "Zend",
      "created_at": "2025-09-29T10:22:28.949766Z",
      "updated_at": "2025-09-29T10:22:28.949771Z",
      "products": [
        {
          "name": "Zend Framework",
          "category": "Web Application / Framework",
          "description": "## 1. What is this product used for?\n\nZend Framework is a PHP web application framework / library suite used to build modular, object‑oriented web applications.\n\n**Primary use case:** providing MVC, routing, HTTP abstractions, form & validation, view helpers etc., to simplify building and maintaining PHP websites or APIs.\n\n## 2. What is the type of this software?\n\nLibrary / Framework (component library) rather than a full standalone application.\n\nThough used to build web applications, it is not itself an operating system nor a full web app; it provides building blocks (controllers, services, views etc.).\n\n## 3. Remote Version Detection Methods (No Credentials Required)\n\nBelow are methods a remote scanner might use to detect that Zend Framework is being used, and possibly what version, without any credentials:\n\n| Method | Description / What to look for |\n|--------|-------------------------------|\n| **HTTP headers** | Sometimes applications or servers include generator headers or X‑Powered‑By headers. For Zend this is less common by default, but custom PHP configurations might expose e.g. `X-Powered-By: PHP/<ver>` or even references to \"Zend\" engine or modules. Also server software (Apache, Nginx) plus PHP / Zend Engine version may leak. |\n| **HTML body (meta tags, footers)** | A \"meta generator\" tag might include \"Zend Framework\" or \"Zend\" or version. Also default skeleton application landing pages (if not removed) might mention Zend; view helpers may output identifiable markup. |\n| **API endpoints** | If there is an API built using Zend MVC or components (e.g. Apigility module), endpoints may return predictable response structures (JSON) or versioning via content‐type or accept headers. Some modules (like zf-versioning) add version tokens via URL or headers. |\n| **Static asset paths (JS/CSS)** | Paths may include recognizable directory structure (e.g. `public/`, `module/Application/public/js/...` or `public/js/...`) or filenames that match what the sample / skeleton application uses. Unminified assets may include comments/headers referencing Zend view helpers. |\n| **Error messages or stack traces** | Default error pages (when `display_exceptions = true`) may expose class names or file paths: e.g. `/library/Zend/Controller/Front.php`, `/module/Application/src/...`, or paths like `Zend_Controller_Action.php(...)`. Those can be fingerprinted. Also exceptions may list `Zend\\*` namespace. |\n| **TLS certificate clues** | Less likely relevant: framework itself doesn't touch TLS certs. But maybe server certificate subject names if deployed via a particular vendor who bundles Zend etc. Generally not useful for Zend specifically. |\n| **robots.txt or sitemap.xml** | Unless custom entries are made, not very likely to include framework name or version. But sometimes `/CHANGELOG`, `/README`, `/composer.json` etc may be accessible via simple paths and reveal version. |\n| **Raw socket/banner grabs** | If the web server banner includes \"Zend Engine\" or \"Zend PHP\", or the PHP build is compiled with Zend extensions, the banner or HTTP responses might leak \"Zend …\", especially via \"phpinfo\" endpoints. But phpinfo is usually disabled. |\n| **Any custom protocol if applicable** | Not really: Zend Framework is PHP based HTTP / web protocol. No special custom protocol. |\n| **Java‑specific techniques** | Not applicable. Zend Framework is PHP‑based. Java techniques don't apply unless mixed environments or proxies are involved. |\n\n## 4. Indirect or Fingerprintable Signs of Version/Presence\n\nWhen direct version strings are missing, these indirect signs can help confirm presence and sometimes version (or at least major version, e.g. ZF1 vs ZF2 vs ZF3 vs Laminas):\n\n### Static asset naming / directory structure\n\n- **Directory layout:** `application/`, `module/`, `library/Zend/…` is typical for ZF1 & ZF2.\n- **For ZF2/ZF3:** `module/<ModuleName>/src/ModuleName/Controller/...` etc.\n- **Skeleton/default application** might include `public/index.php` front controller.\n\n### Unique HTML structures\n\nDefault layouts may include certain HTML head links or scripts inserted via view helpers like `headScript()`, `headLink()`, `doctype()` etc. The markup generated by `Zend\\View\\Helper\\Doctype` or `HtmlTag` may appear in default skeleton apps.\n\n### Field names in API responses\n\nIn ZF Apigility or versioning modules, API responses or route match objects may include keys like `version`, `controller`, `module`, or custom namespace fragments like `V1`, `V2`.\n\n### Plugin paths\n\nPaths containing `Zend/ServiceManager`, `Zend/Controller`, `Zend/View` etc, or in recent code `zendframework/*` components.\n\n### Stack traces or internal file references\n\nIn exceptions, you might see file paths like `.../library/Zend/Controller/Front.php(...)`, `Zend/Application/Bootstrap.php`, etc. Or class names like `Zend_Controller_Action`.\n\n### Error page structure\n\nThe format of a default ZF error page: \"An error occurred / Exception information: ... Message: … Stack trace: … Request Parameters: …\" This is fairly characteristic.\n\n### Response headers or clues\n\n- PHP version and Zend Engine version via `X-Powered-By`.\n- Absence of certain headers (e.g. missing \"Server\" header if suppressed) but presence of signature headers from modules.\n\n### Composer / package files exposure\n\nIf `composer.json`, `composer.lock` are publicly accessible (rare but sometimes misconfigured), can reveal dependencies `zendframework/zend-mvc`, `zendframework/zend-stdlib` etc with versions.\n\n### \"Zend\\Version\\Version::VERSION\" constant\n\nThere is a component \"zend-version\" (though archived) which holds a `Version::VERSION` constant. If code output or debug info ever exposes that, you can see the version.\n\n## 5. Summary Table\n\nHere is a summary table of key detection vectors, what you might see, and what it implies:\n\n| Detection Vector | Example Signature / Output | What It Implies |\n|-----------------|---------------------------|-----------------|\n| **HTTP header X‑Powered‑By** | `X-Powered-By: PHP/7.1.9, Zend Engine v3.0.0` or `X-Powered-By: Zend` | Presence of Zend Engine / PHP; but not necessarily Zend Framework library. Could indicate older ZF1 uses. |\n| **HTML meta tag or generator** | `<meta name=\"generator\" content=\"Zend Framework X.Y.Z\">` | Direct version; but rarely present in production. |\n| **HTML layout markups / helpers** | `<!DOCTYPE html>` generated by `Zend\\View\\Helper\\Doctype`, presence of `<title>` etc; class attributes or view helper comments like `<!-- Module: Application -->` | Confirms use of Zend View / MVC; may hint at version (if skeleton styles differ). |\n| **Error message / default error page** | \"Exception information: Message: … Stack trace: … Zend_Controller_Action … Zend_Application_Bootstrap …\" | Strong indicator of ZF1 or ZF2; the classes in trace can narrow version. |\n| **API versioning module behavior** | URL like `/v1/users` or header `Accept: application/vnd.myapi.v2+json` and route match includes version | If zf-versioning module is used, versioning is applied via headers or URIs. |\n| **File path references in source or output** | `/module/Application/src/Application/Controller/IndexController.php` or `/library/Zend/Controller/...` | Helps distinguish between ZF1 (`library/Zend`), ZF2/ZF3 (module structure) |\n| **Composer package exposure** | Dependency listing: `zendframework/zend-mvc` version \"2.x\" or 3.x | Gives concrete version information. |\n| **Zend\\Version\\Version::VERSION constant exposure** | If code or error reveals that constant value, e.g. `2.5.3` | Direct version. |",
          "created_at": "2025-09-29T10:22:28.954263Z",
          "updated_at": "2025-09-29T10:22:28.954269Z",
          "detection_methods": [],
          "setup_guides": [
            {
              "instructions": "# Zend Framework 1.11.0 Setup with Docker (PHP 7.4 + Apache)\n\n## Prerequisites\n\nBefore starting, make sure the following are installed on your system:\n\n- Docker Engine (v20+ recommended)\n- Docker Compose (optional) – if you prefer `docker-compose`\n\n## Step 1: Project Directory Structure\n\nCreate a project folder (e.g., `zend-1.11-docker`) and switch into it:\n\n```bash\nmkdir zend-1.11-docker\ncd zend-1.11-docker\n```\n\nInside this folder, create the following:\n\n### 1. `Dockerfile`\n\nCreate a file named `Dockerfile` with the following contents:\n\n```dockerfile\nFROM php:7.4-apache\n\nRUN apt-get update && apt-get install -y unzip curl \\\n    && apt-get clean && rm -rf /var/lib/apt/lists/*\n\nWORKDIR /var/www/html\n\n# Download and extract Zend Framework 1.11.0\nRUN curl -L -o zendframework-1.11.0.zip https://packages.zendframework.com/releases/ZendFramework-1.11.0/ZendFramework-1.11.0.zip \\\n    && unzip zendframework-1.11.0.zip -d /tmp \\\n    && mv /tmp/ZendFramework-1.11.0/library/Zend ./Zend \\\n    && rm -rf zendframework-1.11.0.zip /tmp/ZendFramework-1.11.0\n\n# Create a test index file to check the installation\nRUN echo '<?php require_once \"Zend/Version.php\"; echo \"Zend Framework Version: \" . Zend_Version::VERSION; ?>' > /var/www/html/index.php\n\n# Set correct permissions\nRUN chown -R www-data:www-data /var/www/html\n\nEXPOSE 80\n\nCMD [\"apache2-foreground\"]\n```\n\n## Step 2: Build the Docker Image\n\nOpen a terminal in the same directory as your `Dockerfile`, and build the image:\n\n```bash\ndocker build -t zend-php74 .\n```\n\nThis will download the base PHP+Apache image, install dependencies, fetch Zend Framework 1.11.0, and prepare the container.\n\n## Step 3: Run the Container\n\nNow, run the container and map port 80 of the container to port 8080 of your host:\n\n```bash\ndocker run -d -p 8080:80 --name zend-app zend-php74\n```\n\n**Explanation:**\n- `-d` runs the container in the background\n- `-p 8080:80` maps container's Apache port (80) to your localhost (8080)\n- `--name zend-app` gives the container a name\n\n## Step 4: Test in Browser\n\nOpen your browser and visit:\n\n```\nhttp://localhost:8080\n```\n\nYou should see:\n\n```\nZend Framework Version: 1.11.0\n```",
              "created_at": "2025-09-29T10:22:28.959696Z",
              "updated_at": "2025-09-29T10:22:28.959701Z"
            },
            {
              "instructions": "# Zend Framework 2.5.1 Docker Setup Guide (PHP 5.5 + Apache)\n\nThis guide helps you or any developer recreate a working container for **Zend Framework 2.5.1** using **PHP 5.5** and **Apache** — perfect for legacy testing or security research.\n\n## Stack Summary\n\n| Component | Version |\n|-----------|---------|\n| **Zend Framework** | 2.5.1 (via skeleton app) |\n| **PHP** | 5.5 |\n| **Apache** | Built into `php:5.5-apache` |\n| **OS** | Debian Jessie (archived) |\n| **Composer** | Installed globally |\n\n## Prerequisites\n\nEnsure the following are installed:\n\n- Docker: https://docs.docker.com/get-docker/\n- Internet connection (for package and skeleton app download)\n\n## Step 1: Prepare Project Folder\n\n1. Create a working directory:\n\n```bash\nmkdir zend2.5.1-docker\ncd zend2.5.1-docker\n```\n\n2. Create a file named `Dockerfile`:\n\n```dockerfile\n# Use PHP 5.5 with Apache\nFROM php:5.5-apache\n\n# Use archived Debian Jessie sources since it's EOL\nRUN echo \"deb http://archive.debian.org/debian jessie main\" > /etc/apt/sources.list && \\\n    apt-get -o Acquire::Check-Valid-Until=false update && \\\n    apt-get install --allow-unauthenticated -y \\\n        git unzip curl libzip-dev libicu-dev ca-certificates && \\\n    docker-php-ext-install intl zip mysqli pdo pdo_mysql\n\n# Install Composer globally\nRUN curl -sS https://getcomposer.org/installer | php && \\\n    mv composer.phar /usr/local/bin/composer\n\n# Set working directory\nWORKDIR /var/www/html\n\n# Install Zend Framework 2.5.1 Skeleton Application\nRUN composer create-project -sdev \\\n    --repository-url=\"https://packages.zendframework.com\" \\\n    zendframework/skeleton-application:2.5.1 .\n\n# Update Apache DocumentRoot to /public\nRUN sed -i 's|DocumentRoot /var/www/html|DocumentRoot /var/www/html/public|' /etc/apache2/sites-available/000-default.conf\n\n# Enable URL rewriting\nRUN a2enmod rewrite\n\n# Allow .htaccess overrides\nRUN sed -i '/<Directory \\/var\\/www\\/>/,/<\\/Directory>/ s/AllowOverride None/AllowOverride All/' /etc/apache2/apache2.conf\n\nEXPOSE 80\n```\n\n## Step 2: Build the Docker Image\n\nFrom the directory with the `Dockerfile`, run:\n\n```bash\ndocker build -t zf2-app .\n```\n\nThis will:\n- Pull `php:5.5-apache`\n- Install required PHP extensions\n- Install Composer\n- Create a **Zend Framework 2.5.1** skeleton app\n- Configure Apache for ZF2\n\n## Step 3: Run the Container\n\nNow run the container and expose it on port `8080`:\n\n```bash\ndocker run -d -p 8080:80 --name zf2-app zf2-app\n```\n\n- `-d`: Run in background\n- `-p 8080:80`: Maps port 80 in container to 8080 on host\n- `--name zf2-app`: Names the container for easy management\n\nIf it runs successfully, you can check with:\n\n```bash\ndocker ps\n```\n\nYou should see something like:\n\n```\nCONTAINER ID   IMAGE     COMMAND                PORTS                    NAMES\nabc123456789   zf2-app   \"apache2-foreground\"   0.0.0.0:8080->80/tcp     zf2-app\n```\n\n## Step 4: View in Browser\n\nOpen:\n\n```\nhttp://localhost:8080\n```\n\nYou should see:\n\n```\nWelcome to Zend Framework 2\nCongratulations! You have successfully installed the ZF2 Skeleton Application.\n```",
              "created_at": "2025-09-29T10:22:28.963879Z",
              "updated_at": "2025-09-29T10:22:28.963884Z"
            }
          ]
        }
      ]
    },
    {
      "name": "ZenML",
      "created_at": "2025-09-29T10:22:28.968678Z",
      "updated_at": "2025-09-29T10:22:28.968683Z",
      "products": [
        {
          "name": "ZenML",
          "category": "Web Server + CLI",
          "description": "## 1. What is this product used for?\n\nZenML is an open source MLOps framework / metadata layer for managing machine learning pipelines. Its primary use case is to define, version, run, and monitor ML pipelines (steps, artifacts, stacks) in a vendor‑agnostic way, with optional server / dashboard components for metadata, visualization, collaboration.\n\n## 2. What is the type of this software?\n\nZenML is primarily a **Library + Service Application**, with optional server components.\n\n**As a library / SDK:** you install via pip, import in Python, define pipelines/steps etc.\n\n**As a service / server application:** the ZenML Server + Dashboard provides a REST API + web UI for metadata, runs tracking, etc.\n\nSo it's not a pure standalone application in the GUI sense; it's not an operating system. It is a library plus optional server component.\n\n## 3. Remote Version Detection Methods (No Credentials Required)\n\nHere are possible techniques a scanner could use without credentials to detect that ZenML is present, and possibly detect its version. Some may yield direct version strings, some may give clues.\n\n| Method | Possible for ZenML? | Comments / Likelihood |\n|--------|--------------------|-----------------------|\n| HTTP headers | Possible | If the ZenML server is exposed, HTTP responses (API or dashboard requests) may include headers (e.g. `Server:`, `X-Powered-By`, etc.) which could reveal framework or version. However, public docs do not strongly indicate specific version‑leaking headers. |\n| HTML body (meta tags, footers) | Possible | The dashboard UI is a React single‐page application (SPA) served via FastAPI, likely with static assets; there might be version info in the HTML (in JS bundle names, in meta tags) or in the footer of the dashboard. But I did not find documentation of a specific meta tag for version in the publicly published docs. |\n| API endpoints | Possible | ZenML Server provides REST API endpoints. The OpenAPI schema may be accessible (if the docs endpoint is public), which might embed version info. Also, endpoints like `/version` (via CLI or HTTP) may exist. However, I did not find a standard public HTTP endpoint like `/api/version` in the docs that returns version without authentication. |\n| Static asset paths (JS/CSS) | Possible | The dashboard static assets (bundled React app) may have URLs including version, or hashes. For example JS/CSS filenames might have a hash of the build, and sometimes version in path. If the dashboard is accessible, fetching e.g. `/static/js/app.<hash>.js` might reveal clues. |\n| Error messages or stack traces | Possible but lower likelihood | If server misconfigured or error pages are exposed (e.g. 500 errors), the stack traces might include Python module paths (e.g. `zenml.zen_server.*`) which would confirm presence. Also tracebacks might include versioned module filenames. But many deployments disable detailed error display in production. |\n| TLS certificate clues | Possible* | If there is a TLS certificate for ZenML server / dashboard, metadata might include CN or SANs that include the vendor or product name (if they used naming like `zenml.example.com`), but not version. Version info via TLS is unlikely. |\n| robots.txt or sitemap.xml | Less likely | These may exist on the dashboard/web UI; but docs don't say anything about a robots.txt exposing version info. Could reveal presence (i.e. presence of `/dashboard`, `/api/`, etc.), but version is unlikely. |\n| Raw socket/banner grabs | Less likely | If the server is listening on HTTP or HTTPS ports, raw banner may indicate whatever the web server (e.g. uvicorn, FastAPI, Gunicorn) is, but usually not ZenML version. For non‑HTTP protocols, ZenML doesn't seem to expose any custom protocols out of the box. |\n| Any custom protocol if applicable | No known custom protocol | ZenML uses HTTP(s) / REST + static assets + dashboard UI. No known custom non‑HTTP protocol. |\n| Java‑specific techniques | Not applicable | ZenML is Python‑based, so Java techniques (e.g. Java stack frames, Java serialized objects, WEB logic specific to Java) do not apply. |\n\n## 4. Indirect or Fingerprintable Signs of Version/Presence\n\nWhen direct version info is not exposed, here are fallback / fingerprint clues for detecting presence of ZenML, and possibly approximating version.\n\n**Static asset naming / hash patterns:** The dashboard is a React SPA; the build assets (JS/CSS) likely include hashed filenames (e.g. `main.<hash>.js`) or maybe versioned filenames. Comparing those hashes (if known from public builds) can help fingerprint version. Also, location of static files (paths) might be consistent (e.g. `/static/js/…`) and similar between versions.\n\n**Unique HTML structure / HTML dashboard UI:** The dashboard likely has unique elements (e.g. navigation links named \"Pipelines\", \"Dashboard Overview\", \"Stacks\", etc.), layout and class names. Also login page structure might contain \"ZenML\" branding, maybe version badge or \"ZenML Dashboard\" in title.\n\n**Field names in API responses:** Calling known API endpoints (if exposed without auth) might yield JSON with resource names like `pipeline_runs`, `active_stack_model`, `user`, `stack_id`, etc. The exact schema (field names) may shift between versions, so field presence/absence is a fingerprint.\n\n**Plugin / integration paths:** ZenML supports integrations (e.g. Deepchecks, etc.). Sometimes files or directories for these integrations might be visible via static file serving or via UI. For example, static assets for integrations might have identifiable names.\n\n**Stack traces or internal file references:** In logs, error pages, or in misconfigured setups, one might see Python module paths such as `zenml.zen_server.zen_server_api`, or templates or references to `templates/index.html`. The module structure (e.g. `zenml.zen_server`, `zenml.client`) is unique.\n\n**Error page structure:** Default 404 / error pages for missing paths may have HTML indicating the SPA nature (e.g. serving index.html for unknown paths), or include page title / content that says \"ZenML Dashboard\" etc.\n\n**Response headers or clues:** Even if version isn't given, responses might include headers like `X-Content-Type-Options`, caching headers, or possibly a `Via` or `Server: uvicorn` / `Server: ...` etc. \"Server: uvicorn\" or similar may indirectly suggest a Python / FastAPI backend. Also if API error responses include version strings in JSON (less likely), or identify code modules.\n\n## 5. Summary Table\n\nHere is a summary table showing detection vector vs what signatures / outputs one might see (for ZenML); note: some of these are hypothetical based on public docs, some are observed or likely.\n\n| Detection Vector | Possible Output / Signature | Version Info Likely? |\n|------------------|----------------------------|----------------------|\n| HTTP request to dashboard root (e.g. `/`) | HTML page with title \"ZenML Dashboard\", nav entries (Pipelines, Stacks, Dashboard), React SPA index.html. | May show UI version (if included), but often no explicit version. |\n| HTTP GET on static asset (`/static/js/...js`) | JS file name includes hash; possibly a comment inside JS bundle includes build version header (if built to include). | Could reveal version if build embeds it. |\n| Response headers for regular API/static asset requests | `Server: uvicorn`, `X-Powered-By: Python`, other common headers; possibly caching settings or `X‑Frame‑Options` or CSP. | Usually no version, unless misconfigured. |\n| Error or 404 page for non‑existent API path or resource | JSON or HTML error; possibly includes stack trace, module names (`zenml.zen_server_api`, etc.). | Could reveal version if tracebacks include module version or `__version__` in trace. |\n| OpenAPI / API docs endpoint (if public) | Schema may include version in metadata section; endpoint paths like `/docs`, `/openapi.json` with version info. | Good chance of version string in OpenAPI spec. |\n| Login page HTML | Might include \"ZenML\" branding, maybe version in footer or login screen or meta tag. | Possibly version, but many deployments hide it. |\n| TLS certificate CN / SAN | Domain names referencing `zenml.<…>`; issuer info might include vendor clues. | Version unlikely. |\n| Robots.txt or sitemap.xml | May show `/api/`, `/dashboard/`, static paths; existence of these paths suggests presence. | No version. |",
          "created_at": "2025-09-29T10:22:28.972685Z",
          "updated_at": "2025-09-29T10:22:28.972689Z",
          "detection_methods": [
            {
              "name": "API Version Detection",
              "protocol": "HTTP",
              "code_snippets": [
                {
                  "code_language": "python",
                  "code_content": "import re\nimport json\n\ndef extract_version(body, headers):\n    csp = \" \".join(headers.get('content-security-policy', [])) if isinstance(headers.get('content-security-policy'), list) else headers.get('content-security-policy', '')\n    if (\"zenml.hellonext.co\" in csp) or (\"analytics.zenml.io\" in csp) or (\"zenml.\" in csp):\n        try:\n            data = json.loads(body)\n            version = data.get(\"version\")\n            if version:\n                return version\n        except json.JSONDecodeError:\n            return None\n    return None\n\n# Example regex to extract version from JSON response (simple):\nversion_regex = r'\"version\"\\s*:\\s*\"([\\d\\.]+)\"'\n"
                },
                {
                  "code_language": "ruby",
                  "code_content": "csp = Array(page.headers['content-security-policy']).join(\" \")\nif csp.include?(\"zenml.hellonext.co\") || csp.include?(\"analytics.zenml.io\") || csp.include?(\"zenml.\")\n  begin\n    data = JSON.parse(page.body)\n    version = data.dig(\"version\")\n  rescue JSON::ParserError\n  end\n  version # return version string if found\nend\n"
                },
                {
                  "code_language": "curl",
                  "code_content": "curl -s http://target.com/api/v1/info | grep -oP '\"version\"\\s*:\\s*\"\\K[\\d\\.]+'\n"
                }
              ],
              "expected_response": "0.85.0\n",
              "requires_auth": false,
              "created_at": "2025-09-29T10:22:28.977775Z",
              "updated_at": "2025-09-29T10:22:28.977780Z"
            }
          ],
          "setup_guides": [
            {
              "instructions": "# ZenML Server Quick Setup & Version Check Guide\n\n## Step 1: Pull the ZenML Server Docker Image\n\n```bash\ndocker pull zenmldocker/zenml-server:latest\n```\n\n## Step 2: Run the ZenML Server Container\n\n```bash\ndocker run -d --name zenml-server -p 8081:8080 zenmldocker/zenml-server:latest\n```\n\n- Runs the server in detached mode (`-d`)\n- Names the container `zenml-server`\n- Maps container port `8080` to host port `8081`\n\n## Step 3: Verify the Container is Running\n\n```bash\ndocker ps\n```\n\nYou should see an entry like:\n\n```\nCONTAINER ID   IMAGE                              COMMAND                  CREATED         STATUS         PORTS                    NAMES\nxxxxxxx       zenmldocker/zenml-server:latest    \"/entrypoint.sh uvic…\"   X minutes ago   Up X minutes   0.0.0.0:8081->8080/tcp   zenml-server\n```\n\n## Step 4: Fetch the ZenML Server Version\n\nRun:\n\n```bash\ncurl -s http://target.com/api/v1/info | grep -oP '\"version\"\\s*:\\s*\"\\K[\\d\\.]+'\n```\n\nThis will print the ZenML version, e.g.:\n\n```\n0.85.0\n```",
              "created_at": "2025-09-29T10:22:28.985895Z",
              "updated_at": "2025-09-29T10:22:28.985899Z"
            }
          ]
        }
      ]
    },
    {
      "name": "Blackmoon FTP Server",
      "created_at": "2025-09-29T10:22:28.989581Z",
      "updated_at": "2025-09-29T10:22:28.989587Z",
      "products": [
        {
          "name": "Blackmoon FTP Server",
          "category": "Service Application",
          "description": "## 1. What is this product used for?  \nBlackmoon FTP Server is a native Windows FTP server application designed to provide fast, secure, and reliable file transfer services with features such as virtual directories, user and group accounts, file resuming, passive mode transfers, and remote administration.\n\n## 2. What is the type of this software?  \n- Service Application\n\n## 3. Remote Version Detection Methods (No Credentials Required)  \nTechniques a scanner can use to detect Blackmoon FTP Server and its version remotely without credentials include:\n\n- **HTTP headers**  \n  - Not applicable as the product operates over FTP protocol.\n\n- **HTML body (e.g., meta tags, footers)**  \n  - Not applicable.\n\n- **API endpoints**  \n  - None available by default.\n\n- **Static asset paths (JS/CSS)**  \n  - Not applicable.\n\n- **Error messages or stack traces**  \n  - FTP banner messages commonly include server identification and version string, e.g.:  \n    ```\n    220 Blackmoon FTP Server 3.1.2.1731 ready.\n    ```\n  - Responses to FTP commands may reveal version or server signature.\n\n- **TLS certificate clues**  \n  - If FTPS is enabled, TLS certificates may provide hosting information but usually do not disclose version.\n\n- **robots.txt or sitemap.xml**  \n  - Not applicable.\n\n- **Raw socket/banner grabs**  \n  - Banner grabbing on FTP port (usually port 21) is a direct approach to identify Blackmoon FTP Server.\n\n- **Any custom protocol if applicable**  \n  - Uses standard FTP/FTPS protocols.\n\n- **Java-specific techniques**  \n  - Not applicable; Blackmoon FTP Server is not Java-based.\n\n## 4. Indirect or Fingerprintable Signs of Version/Presence  \nWhen no direct version string is visible:\n\n- **Static asset naming/hash patterns**  \n  - Not applicable.\n\n- **Unique HTML structures**  \n  - Not applicable.\n\n- **Field names in API responses**  \n  - Not applicable.\n\n- **Plugin paths**  \n  - Not applicable.\n\n- **Stack traces or internal file references**  \n  - Specific FTP error messages or log references unique to Blackmoon may be used.\n\n- **Error page structure**  \n  - FTP server responses adhere to a recognizable pattern in Blackmoon deployments.\n\n- **Any response headers or clues that can be fingerprinted**  \n  - Unique banner and responses to FTP commands are fingerprintable.\n\n## 5. Summary Table  \n\n| Detection Vector      | Example Output / Signature                       | Notes                             |\n|----------------------|-------------------------------------------------|-----------------------------------|\n| FTP Banner Grab      | `220 Blackmoon FTP Server 3.1.2.1731 ready.`     | Primary version detection method  |\n| FTP Command Responses| Distinctive server replies to FTP commands        | Confirms presence                 |\n| TLS Certificate      | Hosting domain info via FTPS                      | No explicit version info          |\n| HTTP or API Related  | N/A                                              | Not applicable                    |\n| Java Techniques      | N/A                                              | Not applicable                    |",
          "created_at": "2025-09-29T10:56:57.234239Z",
          "updated_at": "2025-09-29T10:56:57.234256Z",
          "detection_methods": [
            {
              "name": "FTP banner Grabbing",
              "protocol": "FTP",
              "code_snippets": [
                {
                  "code_language": "ruby",
                  "code_content": "# Method to extract BlackMoon FTP Server version from a banner string\ndef extract_blackmoon_version(banner)\n  pattern = /BlackMoon\\s+FTP\\s+Server.*?Version\\s+([0-9]+(?:\\.[0-9]+){1,3}).*?Build\\s+([0-9]+)/i\n  if banner =~ pattern\n    svc_app_name = \"blackmoonftpserver:blackmoon_ftp_server\"\n    version = \"#{$1}.#{$2}\"\n    return svc_app_name, version\n  else\n    return nil, nil\n  end\nend\n\n# Example usage\nbanner = \"BlackMoon FTP Server Example Version 1.2.3 Build 456 Some extra info\"\n\nsvc_app_name, version = extract_blackmoon_version(banner)\n\nif svc_app_name && version\n  puts \"Service Name: #{svc_app_name}\"\n  puts \"Version: #{version}\"\nelse\n  puts \"Version not found in banner\"\nend"
                },
                {
                  "code_language": "python",
                  "code_content": "import re\n\ndef extract_blackmoon_version(banner):\n    \"\"\"\n    Extract BlackMoon FTP Server version and build from banner string.\n    \n    Returns:\n        svc_app_name (str) : service/application name\n        version (str)      : version string (e.g., '1.2.3.456')\n    \"\"\"\n    pattern = r\"BlackMoon\\s+FTP\\s+Server.*?Version\\s+([0-9]+(?:\\.[0-9]+){1,3}).*?Build\\s+([0-9]+)\"\n    match = re.search(pattern, banner, re.IGNORECASE)\n    if match:\n        svc_app_name = \"blackmoonftpserver:blackmoon_ftp_server\"\n        version = f\"{match.group(1)}.{match.group(2)}\"\n        return svc_app_name, version\n    return None, None\n\n# Example usage\nbanner = \"BlackMoon FTP Server Example Version 1.2.3 Build 456 Some extra info\"\nsvc_app_name, version = extract_blackmoon_version(banner)\n\nif svc_app_name and version:\n    print(\"Service Name:\", svc_app_name)\n    print(\"Version:\", version)\nelse:\n    print(\"Version not found in banner\")\n"
                }
              ],
              "expected_response": "Service Name: blackmoonftpserver:blackmoon_ftp_server\nVersion: 1.2.3.456",
              "requires_auth": false,
              "created_at": "2025-09-29T11:20:26.915895Z",
              "updated_at": "2025-09-29T11:20:26.915899Z"
            }
          ],
          "setup_guides": []
        }
      ]
    },
    {
      "name": "Apiman",
      "created_at": "2025-09-29T10:47:34.703186Z",
      "updated_at": "2025-09-29T10:47:34.703189Z",
      "products": [
        {
          "name": "Apiman",
          "category": "",
          "description": "## 1. What is this product used for?\nApache CXF is an open source web services framework used to develop and expose services using standards-based APIs such as JAX-WS (SOAP) and JAX-RS (RESTful)[web:30][web:31][web:36][web:38]. It enables Java applications to create, publish, and consume SOAP and REST services in enterprise and SOA environments[web:30][web:31][web:35][web:36].\n\n## 2. What is the type of this software?\nApache CXF is classified as a **Library** for Java developers and as a **Service Application** when deployed as part of a running server-side application[web:30][web:31][web:36][web:38].\n\n## 3. Remote Version Detection Methods (No Credentials Required)\n- **HTTP headers:**  \n  Some deployments may set HTTP headers such as `Server` or custom headers (e.g., `X-Cxf-Version`) that could disclose software or library version.\n- **HTML body (meta tags, footers):**  \n  Not typical, though demo/sample endpoints may include version disclosures in comment tags or banners.\n- **API endpoints:**  \n  Out-of-the-box CXF exposes default service listings (e.g., `/services`, `/cxf`) that sometimes return WSDLs or listings containing version, build, or copyright.\n- **Static asset paths (JS/CSS):**  \n  Not common, as CXF primarily handles XML/JSON, but web frontends for CXF admin or demos may have static assets with versioned names.\n- **Error messages or stack traces:**  \n  Detailed faults (especially in development mode) often reveal CXF versions, Java package structures, and library versions in stack traces or SOAP faults.\n- **TLS certificate clues:**  \n  Rare—CXF itself does not control signing info, but developers may leak info in organization fields of test certificates.\n- **robots.txt or sitemap.xml:**  \n  Not typically populated by CXF, but can be checked for generic `/services` or `/cxf` route mentions.\n- **Raw socket/banner grabs:**  \n  As CXF runs under a Java app server (Jetty, Tomcat, etc.), banners pertain to that server, not CXF itself.\n- **Custom protocol:**  \n  Not applicable; all CXF services are HTTP(S)-based.\n- **Java-specific techniques:**  \n  Stack traces generated by errors or debug pages may mention `org.apache.cxf` with explicit version and package info, which are directly useful for fingerprinting CXF.\n\n## 4. Indirect or Fingerprintable Signs of Version/Presence\n- **Static asset naming/hash patterns:**  \n  Unusual except for admin GUIs or demos, where asset versions may appear.\n- **Unique HTML structures:**  \n  The default `/services` or `/cxf` listing exposes a CXF-styled service list with the phrase \"Apache CXF\" and possibly artifact versions in comments or banners.\n- **Field names in API responses:**  \n  WSDL and API documents referencing `http://cxf.apache.org` namespaces, or in-service listings.\n- **Plugin paths:**  \n  URLs like `/services`, `/cxf`, or endpoints ending with `?wsdl` are suggestive of CXF.\n- **Stack traces/internal file references:**  \n  SOAP Faults or HTTP 500 errors showing Java stacktraces with `org.apache.cxf` package paths.\n- **Error page structure:**  \n  SOAP Faults or REST error payloads formatted in a way typical to CXF default handlers.\n- **Response headers or cookies:**  \n  Uncommon, but bespoke deployments may set CXF-specific headers for debugging.\n\n## 5. Summary Table\n\n| Detection Vector                | Example Signature/Output                                                  |\n|---------------------------------|--------------------------------------------------------------------------|\n| HTTP headers                    | `X-Cxf-Version: 3.5.2`, or `Server: Jetty(CXF)`                          |\n| HTML meta/footer                | Uncommon, but present in some demos as `<!-- Powered by Apache CXF 3.x -->` |\n| API endpoints                   | `/services`, `/cxf`, `/myService?wsdl` showing \"Apache CXF\" in output    |\n| Static asset paths (JS/CSS)     | Rare—seen in admin GUIs or demos; `/static/cxf-console.3.5.2.js`         |\n| Error messages/stack traces     | SOAP Fault/HTTP 500 page: `org.apache.cxf.binding.soap.SoapFault`        |\n| TLS certificate                 | Organization fields, rare and not specific                               |\n| robots.txt/sitemap.xml          | Not typical, but `/services` or `/cxf` paths may appear                  |\n| Banner grabs                    | App server (Tomcat/Jetty) banners, not CXF-specific                      |\n| Unique HTML structures          | Service list: `<h1>Apache CXF - Services List</h1>`                      |\n| API field patterns              | WSDL with `targetNamespace=\"http://cxf.apache.org\"`                      |\n| Stacktrace/package references   | Error: `at org.apache.cxf.interceptor.Fault`                             |",
          "created_at": "2025-09-29T10:47:34.705629Z",
          "updated_at": "2025-09-29T10:47:34.705632Z",
          "detection_methods": [
            {
              "name": "HTTP Header",
              "protocol": "HTTP",
              "code_snippets": [
                {
                  "code_language": "python",
                  "code_content": "import requests\n\ndef get_apiman_version(url=\"http://localhost:8081/apiman/\"):\n    try:\n        response = requests.get(url, timeout=5)\n        response.raise_for_status()\n        data = response.json()\n\n        version_full = data.get(\"version\", \"\")\n        version = \".\".join(version_full.split(\".\")[:3]) if version_full else None\n        return version\n\n    except Exception:\n        return None  # or return \"unknown\" if you prefer\n\n# Example usage:\nif __name__ == \"__main__\":\n    version = get_apiman_version()\n    if version:\n        print(f\"Apiman version: {version}\")\n    else:\n        print(\"Apiman version could not be determined.\")\n"
                }
              ],
              "expected_response": "Apiman version: < - Apiman version - >",
              "requires_auth": false,
              "created_at": "2025-09-29T10:47:34.708734Z",
              "updated_at": "2025-09-29T10:47:34.708737Z"
            }
          ],
          "setup_guides": [
            {
              "instructions": "# Apiman - Docker Image Configuration\n\n**Vendor Name**: Apiman  \n**Product Name**: Apiman  \n**Version**: 3.1.1  \n\n---\n\n## Steps\n\n1. Clone the Apiman GitHub repository:\n   ```bash\n   git clone https://github.com/apiman/apiman.git\n   cd apiman/containers/on-wildfly\n2. Build the Docker image with a specific version:\n   ```bash\n   docker build -t apiman/on-wildfly:3.1.1.Final --build-arg APIMAN_VERSION=3.1.1.Final .\n3. Run the Apiman container:\n   ```bash\n   docker run -d --name apiman -p 8080:8080 -p 9990:9990 apiman/on-wildfly:3.1.1.Final",
              "created_at": "2025-09-29T10:47:34.712952Z",
              "updated_at": "2025-09-29T10:47:34.712964Z"
            }
          ]
        }
      ]
    },
    {
      "name": "concretecms",
      "created_at": "2025-09-29T10:47:34.715144Z",
      "updated_at": "2025-09-29T10:47:34.715147Z",
      "products": [
        {
          "name": "Concrete CMS",
          "category": "",
          "description": "## 1. What is this product used for?\nConcrete CMS is an open-source content management system designed to help users build, manage, and maintain websites with features for content versioning, publishing workflows, permissions, and extensibility through add-ons and themes[web:48][web:50][web:55].\n\n## 2. What is the type of this software?\nConcrete CMS is primarily a **Web Application**, and also serves as a **Service Application** when deployed for multi-site and enterprise uses[web:48][web:50][web:55].\n\n## 3. Remote Version Detection Methods (No Credentials Required)\n- **HTTP headers:**  \n  Occasionally, headers like `X-Powered-By` or custom values may reveal Concrete CMS or PHP version (though often obfuscated or disabled in production)[web:53].\n- **HTML body (meta tags, footers):**  \n  The HTML source of public pages often includes a generator meta tag such as `<meta name=\"generator\" content=\"Concrete CMS 9.4.4\">`, which exposes the exact version[web:48][web:53].\n- **API endpoints:**  \n  If REST or AJAX endpoints are exposed, version or build info may be referenced in documentation responses, error messages, or server info endpoints.\n- **Static asset paths (JS/CSS):**  \n  Versioned asset URLs such as `/concrete/js/app.js?ver=9.4.4` or similar patterns commonly reflect the Concrete CMS version[web:48][web:53].\n- **Error messages or stack traces:**  \n  Verbose error or debug output (especially in development mode) can include version, file paths, and stack traces that reference the Concrete CMS version.\n- **TLS certificate clues:**  \n  Uncommon, but staging/test sites could use subject/organization fields referencing Concrete in the certificate.\n- **robots.txt or sitemap.xml:**  \n  May reveal Concrete-specific paths such as `/index.php/dashboard`, `/index.php/login`, or unique sitemap structures identifying Concrete installations[web:53].\n- **Raw socket/banner grabs:**  \n  Not applicable, as Concrete CMS runs under standard webservers (Apache/Nginx).\n- **Custom protocol clues:**  \n  Not applicable; Concrete CMS operates solely over HTTP/HTTPS.\n- **Java-specific techniques:**  \n  Not applicable, Concrete CMS is PHP-based.\n\n## 4. Indirect or Fingerprintable Signs of Version/Presence\n- **Static asset naming/hash patterns:**  \n  Asset URLs such as `/concrete/js/build/core.js?v=abc123` (hash or versioned) map to known Concrete CMS releases[web:53].\n- **Unique HTML structures:**  \n  HTML comments, IDs, or classes unique to Concrete templates—such as `<div id=\"ccm-toolbar\">`, `<body class=\"page-template-concrete\">`, or similar[web:53].\n- **Field names in API responses:**  \n  REST or AJAX responses with keys such as `concreteToken`, `ccm_token`, or structured JSON characteristic of Concrete's backend.\n- **Plugin paths:**  \n  URL paths such as `/index.php/dashboard/files`, `/index.php/tools/packages` or add-on specific endpoints linked to the Concrete extension ecosystem.\n- **Stack traces/internal file references:**  \n  Verbose errors exposing internal paths like `/concrete/controllers/`, `/application/controllers/` or referencing Concrete core code[web:48].\n- **Error page structure:**  \n  Error or maintenance pages featuring Concrete branding or standard layout templates[web:48].\n- **Response headers or cookies:**  \n  Session or CSRF tokens named like `CONCRETE5`, `CONCRETE_SESSION`, or `ccmXSRF`[web:53].\n\n## 5. Summary Table\n\n| Detection Vector                | Example Signature/Output                                           |\n|---------------------------------|-------------------------------------------------------------------|\n| HTTP headers                    | `X-Powered-By: Concrete CMS`, or PHP version header (optional)    |\n| HTML meta/footer                | `<meta name=\"generator\" content=\"Concrete CMS 9.4.4\">`            |\n| API endpoints                   | `/index.php/api/version` returns `{ \"version\": \"9.4.4\" }`         |\n| Static asset paths (JS/CSS)     | `/concrete/js/app.js?ver=9.4.4`                                   |\n| Error messages/stack traces     | `require(/concrete/controllers/dashboard.php): failed to open`     |\n| TLS certificate                 | O field with Concrete reference (rare)                            |\n| robots.txt/sitemap.xml          | Paths: `/index.php/dashboard/`, `/index.php/login`                |\n| Banner grabs                    | N/A (returns standard web server banner only)                      |\n| Unique HTML structures          | `<div id=\"ccm-toolbar\">`, Concrete-specific classes or comments    |\n| API field patterns              | JSON with `concreteToken`, `ccm_token`                            |\n| Plugin paths                    | `/index.php/dashboard/files/`, `/index.php/tools/packages/`        |\n| Session cookies                 | `CONCRETE_SESSION`, `ccmXSRF`                                     |\n",
          "created_at": "2025-09-29T10:47:34.717464Z",
          "updated_at": "2025-09-29T10:47:34.717467Z",
          "detection_methods": [],
          "setup_guides": [
            {
              "instructions": "# Concrete CMS - Docker Image Configuration\n\n**Vendor Name**: Concretecms  \n**Product Name**: Concrete CMS  \n**Version**: 9.3.x  \n\n---\n\n## Steps\n\n1. Run the Concrete CMS Docker container:\n   ```bash\n   docker run --rm -it \\\n     -p 8080:80 \\\n     ghcr.io/concrete5-community/docker5:9.3.x-full",
              "created_at": "2025-09-29T10:47:34.720115Z",
              "updated_at": "2025-09-29T10:47:34.720118Z"
            }
          ]
        }
      ]
    },
    {
      "name": "ethereum",
      "created_at": "2025-09-29T10:47:34.721862Z",
      "updated_at": "2025-09-29T10:47:34.721865Z",
      "products": [
        {
          "name": "Go Ethereum",
          "category": "",
          "description": "# Ethereum Go Ethereum\n\n## 1. What is this product used for?\n\nGo Ethereum (Geth) is a software client for running a node on the Ethereum blockchain network. It enables full participation in Ethereum, including syncing the blockchain, validating transactions, deploying and interacting with smart contracts, and mining[web:11][web:13].\n\n## 2. What is the type of this software?\n\nThis software is a:\n- Standalone Application (Command-Line Client)\n- Library (Go packages for developers)\n- Service Application (can run as a background process/server exposing APIs)[web:13][web:16].\n\n## 3. Remote Version Detection Methods (No Credentials Required)\n\n- **HTTP Headers:**  \n  Geth nodes can expose HTTP JSON-RPC servers; however, no version header is set by default. Custom proxies may add headers.\n- **HTML Body:**  \n  Not applicable—Geth does not serve web UIs for node operation.\n- **API Endpoints:**  \n  The web3_clientVersion JSON-RPC call (`POST /` with method `web3_clientVersion`) returns the Geth version string (e.g., `\"Geth/v1.13.4-stable-...\"`) if JSON-RPC is enabled and open[web:16].\n- **Static Asset Paths (JS/CSS):**  \n  Not applicable—no web UI or static assets served by Geth itself.\n- **Error Messages or Stack Traces:**  \n  JSON-RPC responses may include format or method errors referencing the software version under certain misconfigurations.\n- **TLS Certificate Clues:**  \n  If HTTP(s) is used for the RPC endpoint and a self-signed certificate is used, there could be accidental info in the CN field, but this is not typical.\n- **robots.txt or sitemap.xml:**  \n  Not applicable; Geth does not serve these files.\n- **Raw Socket/Banner Grabs:**  \n  No clear-text banners are served on the relevant ports. However, the p2p protocol handshake (`devp2p`) may reveal supported version and protocol information if a client connects to the Node's port (default 30303).\n- **Any custom protocol:**  \n  Geth's devp2p protocol may leak supported protocol info on handshake.\n- **Java-specific Techniques:**  \n  Not applicable—Go Ethereum is not Java-based[web:16].\n\n## 4. Indirect or Fingerprintable Signs of Version/Presence\n\n- **Static Asset Naming/Hash Patterns:**  \n  Not applicable—no static assets are exposed.\n- **Unique HTML Structures:**  \n  Not applicable.\n- **Field Names in API Responses:**  \n  JSON-RPC error and response formats and available methods can change across versions and can be fingerprinted for indirect versioning[web:16].\n- **Plugin Paths:**  \n  Not applicable.\n- **Stack Traces or Internal File References:**  \n  Some JSON-RPC errors may reference files, methods, or include verbose error content if non-standard requests are sent[web:16].\n- **Error Page Structure:**  \n  Error JSON responses can have version-dependent formats.\n- **Response Headers or Fingerprintable Clues:**  \n  HTTP headers might indicate the presence of Go HTTP servers (e.g., `Server: Go-http-kit`), but this is generic to Go, not specifically Geth.\n\n## 5. Summary Table\n\n| Detection Vector    | Example Output or Signature                                 |\n|---------------------|-------------------------------------------------------------|\n| API Endpoint        | JSON-RPC: `{ \"result\": \"Geth/v1.13.4-stable-...\" }`         |\n| Devp2p Handshake    | Node handshake returns capability string inc. protocol, ver. |\n| HTTP Headers        | Possibly `Server: Go-http-kit` (not unique to Geth)         |\n| Error JSON Response | `{ \"error\": { \"code\": -32601, \"message\": \"the method ...\" }}`|\n| Protocol Metadata   | Supported capabilities/versions in p2p devp2p handshake     |\n| Field Name Changes  | Method support or missing fields in JSON-RPC response       |\n| Stack Trace         | Error outputs (rare, only on misconfiguration)              |\n| TLS Certificate     | Custom CN info, uncommon; not default Geth config           |\n",
          "created_at": "2025-09-29T10:47:34.723773Z",
          "updated_at": "2025-09-29T10:47:34.723776Z",
          "detection_methods": [
            {
              "name": "HTTP Header",
              "protocol": "HTTP",
              "code_snippets": [
                {
                  "code_language": "python",
                  "code_content": "import requests\nimport re\n\ndef get_geth_version(base_url):\n    headers = {\n        \"Content-Type\": \"application/json\",\n        \"Connection\": \"close\"\n    }\n    body = {\n        \"jsonrpc\": \"2.0\",\n        \"method\": \"web3_clientVersion\",\n        \"params\": [],\n        \"id\": 1\n    }\n\n    try:\n        resp = requests.post(base_url, json=body, headers=headers, timeout=5)\n        if resp.status_code != 200:\n            return None\n\n        # Extract the full version string from the JSON response\n        match = re.search(r'\"result\"\\s*:\\s*\"([^\"]+)\"', resp.text)\n        if match:\n            full_version = match.group(1)\n            # Extract semantic version like v1.8.11\n            version_match = re.search(r'v(\\d+\\.\\d+\\.\\d+)', full_version)\n            if version_match:\n                return version_match.group(1)\n\n    except requests.RequestException:\n        return None\n\n# Example usage\nif __name__ == \"__main__\":\n    geth_url = \"http://127.0.0.1:8545\"  # Replace with your Geth RPC URL\n    version = get_geth_version(geth_url)\n    print(\"Geth version:\", version)\n"
                }
              ],
              "expected_response": "",
              "requires_auth": false,
              "created_at": "2025-09-29T10:47:34.726190Z",
              "updated_at": "2025-09-29T10:47:34.726193Z"
            }
          ],
          "setup_guides": [
            {
              "instructions": "# Go Ethereum - Docker Image Configuration\n\n**Vendor Name**: Ethereum  \n**Product Name**: Go Ethereum  \n**Version**: 1.8.11  \n\n---\n\n## Steps\n\n1. Pull the Go Ethereum Docker image:\n   ```bash\n   docker pull ethereum/client-go:v1.8.11\n2. Run the Go Ethereum container:\n   ```bash\n   docker run -d   --name geth-dev   --restart unless-stopped   -p 8545:8545   -p 30303:30303 -p 30303:30303/udp   -v geth-data:/root/.ethereum   ethereum/client-go:v1.8.11   --dev   --rpc --rpcaddr 0.0.0.0 --rpcport 8545   --rpcapi \"db,eth,net,web3,personal,miner\"   --ws --wsaddr 0.0.0.0 --wsport 8546 --wsorigins \"*\"\n3. Start the container (using ID or name):\n   ```bash\n   docker start <container_id_or_name>",
              "created_at": "2025-09-29T10:47:34.729462Z",
              "updated_at": "2025-09-29T10:47:34.729464Z"
            }
          ]
        }
      ]
    },
    {
      "name": "liferay",
      "created_at": "2025-09-29T10:47:34.731146Z",
      "updated_at": "2025-09-29T10:47:34.731148Z",
      "products": [
        {
          "name": "Liferay Portal",
          "category": "",
          "description": "## 1. What is this product used for?\nLiferay Portal is an open source enterprise portal platform used to build corporate intranets, extranets, websites, and web applications, providing features for content management, collaboration, and customizable digital experiences for businesses and institutions[web:11][web:14][web:15][web:16][web:17].\n\n## 2. What is the type of this software?\nLiferay Portal is primarily classified as a Web Application and a Service Application. It is a Java-based platform that can be deployed on various servlet containers or application servers and integrates as middleware to deliver enterprise web portals[web:11][web:14][web:17].\n\n## 3. Remote Version Detection Methods (No Credentials Required)\nAll potential scanner techniques for remote detection without authentication include:\n\n- **HTTP headers:**  \n  Look for identifying headers such as `Server`, `X-Powered-By`, or custom headers settled by Liferay that may include version info.\n- **HTML body (meta tags, footers):**  \n  Check for meta tags like `<meta name=\"generator\">`, branded page footers showing the version, or JavaScript variable leaks in page source.\n- **API endpoints:**  \n  Some default or debug endpoints (such as `/api/jsonws` or `/api/liferay`) may leak version info in response or as part of metadata.\n- **Static asset paths (JS/CSS):**  \n  Included asset URLs might have version numbers, e.g., `/o/frontend-js-web@5.0.12/` or similar naming patterns for JavaScript bundles and CSS files.\n- **Error messages or stack traces:**  \n  Application errors in HTTP 500s or misconfigured environments might disclose Liferay version or library version as part of Java stack traces.\n- **TLS certificate clues:**  \n  Not commonly used, but certificates in test environments might include organization fields referencing Liferay.\n- **robots.txt or sitemap.xml:**  \n  Presence of Liferay-specific paths (like `/web/guest/` or `/group/control_panel`) can suggest Liferay, with versions sometimes inferred via path structures.\n- **Raw socket/banner grabs:**  \n  TCP banner grabbing is not typically revealing for Liferay as a Java web app, but application servers (e.g., Tomcat, JBoss) may leak details if unprotected.\n- **Custom protocol clues:**  \n  Not usually applicable, as Liferay is primarily HTTP/S-based.\n- **Java-specific techniques:**  \n  Java stack traces in error pages or serialized object signatures in error messages could expose detailed version data, relevant to Liferay’s Java backend.\n\n## 4. Indirect or Fingerprintable Signs of Version/Presence\nIf direct version discovery fails, use these fingerprinting and heuristic methods:\n\n- **Static asset naming or hashes:**  \n  Asset paths like `/o/frontend-js-web@5.0.12/` or hashed asset filenames can be mapped to known Liferay releases.\n- **Unique HTML structures:**  \n  ID/class names such as `id=\"content-web\"` or portal scaffolding elements like `<div class=\"portlet-boundary_...\">` are signatures of Liferay[web:16].\n- **Field names in API responses:**  \n  Unique JSON/XML field names, like `groupId`, `layoutId`, or known Liferay service patterns.\n- **Plugin paths:**  \n  URLs or references such as `/documents/`, `/image/`, `/web/guest/`, or `/group/control_panel` can indicate Liferay’s presence.\n- **Stack traces/internal file references:**  \n  Java error stack traces on errors referencing Liferay packages or module paths.\n- **Error page structure:**  \n  Certain error pages (404, 500) with Liferay branding or layout hints.\n- **Response headers or cookies:**  \n  Cookies like `JSESSIONID` or Liferay-internal session tokens; responses may include versioned resource links.\n\n## 5. Summary Table\n\n| Detection Vector                | Example Signature/Output                                             |\n|---------------------------------|---------------------------------------------------------------------|\n| HTTP headers                    | `X-Powered-By: Liferay Portal 7.4.3.10-ga10`                        |\n| HTML meta/footer                | `<meta name=\"generator\" content=\"Liferay 7.4.3.10-ga10\" />`         |\n| API endpoints                   | `/api/jsonws` exposing `buildNumber` or version in responses        |\n| Static asset paths (JS/CSS)     | `/o/frontend-js-web@5.0.12/` or `/o/portal-web@4.2.0/`              |\n| Error messages/stack traces     | `org.liferay.portal.servlet.MainServletException` in stack trace    |\n| TLS certificate                 | O fields containing `Liferay, Inc.` (rare/test envs)                |\n| robots.txt/sitemap.xml          | Paths like `/web/guest/` or `/group/control_panel`                  |\n| Banner grabs                    | Application server banners (Tomcat, etc.), not Liferay-specific     |\n| Unique HTML structures          | `<div class=\"portlet-boundary_portlet_WAR_...\">`                   |\n| API field patterns              | JSON with `groupId`, `layoutId`, etc.                              |\n| Cookie/session patterns         | `JSESSIONID` or `_LFR_SESSION_STATE` cookies present                |\n",
          "created_at": "2025-09-29T10:47:34.733162Z",
          "updated_at": "2025-09-29T10:47:34.733164Z",
          "detection_methods": [
            {
              "name": "HTTP Header",
              "protocol": "HTTP",
              "code_snippets": [
                {
                  "code_language": "python",
                  "code_content": "import requests\nimport re\n\ndef get_liferay_version(url):\n    try:\n        response = requests.head(url, timeout=5)\n        response.raise_for_status() \n\n        liferay_header = response.headers.get('Liferay-Portal')\n        if liferay_header:\n            match = re.search(r'(\\d+\\.\\d+(?:\\.\\d+){0,2})', liferay_header)\n            if match:\n                return match.group(1)\n        return None\n    except requests.RequestException as e:\n        return None\n\nif __name__ == \"__main__\":\n    url = \"http://127.0.0.1:8080\"\n    version = get_liferay_version(url)\n    if version:\n        print(version)"
                }
              ],
              "expected_response": "Liferay version: < - Liferay Portal Version - >",
              "requires_auth": false,
              "created_at": "2025-09-29T10:47:34.735761Z",
              "updated_at": "2025-09-29T10:47:34.735764Z"
            }
          ],
          "setup_guides": [
            {
              "instructions": "# Liferay Portal - Docker Image Configuration\n\n**Version**: 7.2.0beta1  \n\n---\n\n## Steps\n\n1. Pull the Liferay Portal Docker image:\n   ```bash\n   docker pull liferay/portal:7.2.0-ga1\n2. Run the Liferay Portal container:\n   ```bash\n   docker run -it -p 8080:8080 liferay/portal:7.2.0-ga1",
              "created_at": "2025-09-29T10:47:34.739483Z",
              "updated_at": "2025-09-29T10:47:34.739486Z"
            }
          ]
        }
      ]
    },
    {
      "name": "Couchbase",
      "created_at": "2025-09-29T10:47:34.741153Z",
      "updated_at": "2025-09-29T10:47:34.741157Z",
      "products": [
        {
          "name": "Couchbase Server",
          "category": "",
          "description": "## 1. What is this product used for?\nCouchbase Server is a distributed NoSQL document-oriented database designed to provide scalable, high-performance data management with features like key-value storage, querying with SQL++, full-text search, and built-in analytics. It targets modern applications requiring flexible schema, high availability, and easy scalability[web:63][web:64].\n\n## 2. What is the type of this software?\nCouchbase Server is a **Service Application** that runs as a distributed database server. It also provides SDKs (libraries) for multiple programming languages for client application integration[web:63][web:64].\n\n## 3. Remote Version Detection Methods (No Credentials Required)\n- **HTTP headers:**  \n  Management and query REST APIs on ports like 8091 or 8092 may respond with headers or JSON responses containing version info.\n- **HTML body (meta tags, footers):**  \n  The Web Console accessed on port 8091 might expose version details in the UI source or footers.\n- **API endpoints:**  \n  The REST API endpoint `/pools` (e.g., `http://host:8091/pools`) returns cluster info including the Couchbase Server version in JSON.\n- **Static asset paths (JS/CSS):**  \n  Web console assets may include version info embedded in filenames or URL query strings.\n- **Error messages or stack traces:**  \n  Error responses from REST APIs might contain version or build info.\n- **TLS certificate clues:**  \n  Typically not used for versioning info.\n- **robots.txt or sitemap.xml:**  \n  Usually not present for Couchbase Web Console.\n- **Raw socket/banner grabs:**  \n  No version info typically included in TCP banners for Couchbase ports.\n- **Custom protocol:**  \n  The binary memcached protocol or query protocol does not reveal version in banner.\n- **Java-specific techniques:**  \n  Internal Java methods or stack traces accessible via errors or debug endpoints can reveal version.\n\n## 4. Indirect or Fingerprintable Signs of Version/Presence\n- **Static asset naming/hash patterns:**  \n  Assets from the web console UI or SDKs may have versions appended to URLs.\n- **Unique HTML structures:**  \n  The structure of Couchbase Web Console webpage (e.g., specific CSS IDs or div classes) is indicative.\n- **Field names in API responses:**  \n  JSON keys like `implementationVersion`, `version`, `nodeVersions`, or `edition` in the `/pools` REST API response.\n- **Plugin paths:**  \n  Not typically applicable; Couchbase extensions aren't loaded via HTTP paths.\n- **Stack traces/internal file references:**  \n  Detailed error reports may have Java stack traces referencing Couchbase versioned packages.\n- **Error page structure:**  \n  JSON error responses from management APIs.\n- **Response headers or cookies:**  \n  Browser cookies like `PERSISTENTID` or headers in Web Console interactions.\n\n## 5. Summary Table\n\n| Detection Vector                | Example Signature/Output                                              |\n|---------------------------------|----------------------------------------------------------------------|\n| HTTP headers                    | `Server: Couchbase` or custom headers via REST API                   |\n| HTML meta/footer                | Footer or comments in Web Console HTML showing version details       |\n| API endpoints                   | GET `/pools` → `{ \"implementationVersion\": \"7.1.1-1234-enterprise\"}` |\n| Static asset paths (JS/CSS)     | `/app/console-v7.1.1.js`                                             |\n| Error messages/stack traces     | Exception trace referencing `com.couchbase.server` package          |\n| TLS certificate                 | Not typically used                                                    |\n| robots.txt/sitemap.xml          | Usually absent                                                       |\n| Banner grabs                    | No version info on TCP banner                                        |\n| Unique HTML structures          | Containers with IDs like `#cb-web-console`                           |\n| API field patterns              | JSON keys: `implementationVersion`, `version`, `edition`            |\n| Stacktrace/package references   | Java stack with `com.couchbase.server` references                    |\n\n\n",
          "created_at": "2025-09-29T10:47:34.743195Z",
          "updated_at": "2025-09-29T10:47:34.743197Z",
          "detection_methods": [
            {
              "name": "HTTP Header",
              "protocol": "HTTP",
              "code_snippets": [
                {
                  "code_language": "python",
                  "code_content": "import requests\nimport re\n\ndef get_couchbase_version():\n    \"\"\"Returns Couchbase Server version in short form (e.g., 4.6.3 or 7.2).\"\"\"\n    try:\n        r = requests.get(\"http://localhost:8091/pools\", timeout=5)\n        if r.status_code == 200:\n            full_version = r.json().get(\"implementationVersion\", \"\")\n            if full_version:\n                # Match \"x.y\" or \"x.y.z\" at the start of the version string\n                match = re.match(r\"^\\d+\\.\\d+(?:\\.\\d+)?\", full_version)\n                if match:\n                    return match.group(0)\n    except Exception as e:\n        print(f\"[!] Error: {e}\")\n    return None\n\n# Example usage\nversion = get_couchbase_version()\nprint(\"Couchbase Server version:\", version)"
                }
              ],
              "expected_response": "Couchbase Server version: < - Couchbase Server version - >",
              "requires_auth": false,
              "created_at": "2025-09-29T10:47:34.745557Z",
              "updated_at": "2025-09-29T10:47:34.745559Z"
            }
          ],
          "setup_guides": [
            {
              "instructions": "# Couchbase Server - Docker Image Configuration\n\n**Vendor Name**: Couchbase  \n**Product Name**: Couchbase Server  \n**Version**: 4.6.3  \n\n---\n\n## Steps\n\n1. Pull the Couchbase Server Docker image:\n   ```bash\n   docker pull ceejatec/couchbase-server-nonroot:4.6.3\n2. Run the Couchbase Server container:\n   ```bash\n   docker run -d   --name couchbase-463   -p 8091-8094:8091-8094   -p 11210:11210   ceejatec/couchbase-server-nonroot:4.6.3",
              "created_at": "2025-09-29T10:47:34.748531Z",
              "updated_at": "2025-09-29T10:47:34.748533Z"
            }
          ]
        }
      ]
    }
  ]
}